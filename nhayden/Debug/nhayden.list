
nhayden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800465c  0800465c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  0800465c  0800465c  0000565c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004664  08004664  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004664  08004664  00005664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004668  08004668  00005668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800466c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000010  0800467c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800467c  00006144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e94a  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ee  00000000  00000000  00014983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00016d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b89  00000000  00000000  00017c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017afd  00000000  00000000  000187c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107ab  00000000  00000000  000302be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c126  00000000  00000000  00040a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  000ccbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d0904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080045d0 	.word	0x080045d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080045d0 	.word	0x080045d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fdd8 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f818 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9a0 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f926 	bl	80003bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f972 	bl	8000458 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000174:	f000 f89e 	bl	80002b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000178:	f000 f85e 	bl	8000238 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  changemod(1);
 800017c:	2001      	movs	r0, #1
 800017e:	f000 fa43 	bl	8000608 <changemod>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxByte, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4902      	ldr	r1, [pc, #8]	@ (8000190 <main+0x34>)
 8000186:	4803      	ldr	r0, [pc, #12]	@ (8000194 <main+0x38>)
 8000188:	f003 fc66 	bl	8003a58 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	bf00      	nop
 800018e:	e7fd      	b.n	800018c <main+0x30>
 8000190:	20000134 	.word	0x20000134
 8000194:	200000ec 	.word	0x200000ec

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	@ 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f004 f9e6 	bl	8004578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c8:	2302      	movs	r3, #2
 80001ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d0:	2310      	movs	r3, #16
 80001d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fdd3 	bl	8001d88 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001e8:	f000 fb98 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f840 	bl	800228c <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000212:	f000 fb83 	bl	800091c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f002 f9c1 	bl	80025a8 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800022c:	f000 fb76 	bl	800091c <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	@ 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <MX_ADC1_Init+0x74>)
 800024a:	4a19      	ldr	r2, [pc, #100]	@ (80002b0 <MX_ADC1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000256:	2201      	movs	r2, #1
 8000258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000262:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000268:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <MX_ADC1_Init+0x74>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000276:	f000 fdaf 	bl	8000dd8 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 fb4c 	bl	800091c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000284:	2301      	movs	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800028c:	2307      	movs	r3, #7
 800028e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000296:	f001 f835 	bl	8001304 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a0:	f000 fb3c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000002c 	.word	0x2000002c
 80002b0:	40012400 	.word	0x40012400

080002b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b092      	sub	sp, #72	@ 0x48
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]
 80002d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2220      	movs	r2, #32
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 f94a 	bl	8004578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e4:	4b33      	ldr	r3, [pc, #204]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002e6:	4a34      	ldr	r2, [pc, #208]	@ (80003b8 <MX_TIM1_Init+0x104>)
 80002e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 80002ea:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002ec:	2250      	movs	r2, #80	@ 0x50
 80002ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f0:	4b30      	ldr	r3, [pc, #192]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fe:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000304:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800030a:	4b2a      	ldr	r3, [pc, #168]	@ (80003b4 <MX_TIM1_Init+0x100>)
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000310:	4828      	ldr	r0, [pc, #160]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000312:	f002 facf 	bl	80028b4 <HAL_TIM_PWM_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800031c:	f000 fafe 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000328:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800032c:	4619      	mov	r1, r3
 800032e:	4821      	ldr	r0, [pc, #132]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000330:	f003 f9f6 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800033a:	f000 faef 	bl	800091c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	@ 0x60
 8000340:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 950;
 8000342:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034c:	2300      	movs	r3, #0
 800034e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000360:	2200      	movs	r2, #0
 8000362:	4619      	mov	r1, r3
 8000364:	4813      	ldr	r0, [pc, #76]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000366:	f002 fd87 	bl	8002e78 <HAL_TIM_PWM_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000370:	f000 fad4 	bl	800091c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000398:	f003 fa20 	bl	80037dc <HAL_TIMEx_ConfigBreakDeadTime>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80003a2:	f000 fabb 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003a6:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80003a8:	f000 fb8e 	bl	8000ac8 <HAL_TIM_MspPostInit>

}
 80003ac:	bf00      	nop
 80003ae:	3748      	adds	r7, #72	@ 0x48
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	2000005c 	.word	0x2000005c
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003e2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80003e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80003ee:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80003f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000402:	4814      	ldr	r0, [pc, #80]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000404:	f002 f986 	bl	8002714 <HAL_TIM_Base_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800040e:	f000 fa85 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000420:	f002 fdec 	bl	8002ffc <HAL_TIM_ConfigClockSource>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800042a:	f000 fa77 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_TIM2_Init+0x98>)
 800043c:	f003 f970 	bl	8003720 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000446:	f000 fa69 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a4 	.word	0x200000a4

08000458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <MX_USART1_UART_Init+0x50>)
 8000460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000464:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000490:	f003 fa07 	bl	80038a2 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800049a:	f000 fa3f 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000ec 	.word	0x200000ec
 80004a8:	40013800 	.word	0x40013800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c0:	4b31      	ldr	r3, [pc, #196]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a30      	ldr	r2, [pc, #192]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b25      	ldr	r3, [pc, #148]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a24      	ldr	r2, [pc, #144]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	481f      	ldr	r0, [pc, #124]	@ (800058c <MX_GPIO_Init+0xe0>)
 800050e:	f001 fbd9 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_GPIO_Init+0xe4>)
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4819      	ldr	r0, [pc, #100]	@ (800058c <MX_GPIO_Init+0xe0>)
 8000526:	f001 fa49 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800052a:	2308      	movs	r3, #8
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4812      	ldr	r0, [pc, #72]	@ (800058c <MX_GPIO_Init+0xe0>)
 8000542:	f001 fa3b 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Nhan3s_Pin */
  GPIO_InitStruct.Pin = Nhan3s_Pin;
 8000546:	2308      	movs	r3, #8
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_GPIO_Init+0xe8>)
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054e:	2302      	movs	r3, #2
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Nhan3s_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480f      	ldr	r0, [pc, #60]	@ (8000598 <MX_GPIO_Init+0xec>)
 800055a:	f001 fa2f 	bl	80019bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	2006      	movs	r0, #6
 8000564:	f001 f941 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000568:	2006      	movs	r0, #6
 800056a:	f001 f95a 	bl	8001822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2009      	movs	r0, #9
 8000574:	f001 f939 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000578:	2009      	movs	r0, #9
 800057a:	f001 f952 	bl	8001822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800
 8000590:	10110000 	.word	0x10110000
 8000594:	10310000 	.word	0x10310000
 8000598:	40010c00 	.word	0x40010c00

0800059c <printf_uart>:

/* USER CODE BEGIN 4 */
// hàm in ra bằng UART dùng để gọi ngắn gọn hơn
void printf_uart(const char *mess) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)mess, strlen(mess), 500);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fdd1 	bl	800014c <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <printf_uart+0x28>)
 80005b6:	f003 f9c4 	bl	8003942 <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200000ec 	.word	0x200000ec

080005c8 <changeARR>:

//Hàm thay đổi ARR của TIM2
void changeARR(uint16_t ARR){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim2, ARR);
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <changeARR+0x38>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	88fa      	ldrh	r2, [r7, #6]
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4a08      	ldr	r2, [pc, #32]	@ (8000600 <changeARR+0x38>)
 80005de:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim2);
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <changeARR+0x38>)
 80005e2:	f002 f8e7 	bl	80027b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop_IT(&htim1,TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <changeARR+0x3c>)
 80005ea:	f002 faa3 	bl	8002b34 <HAL_TIM_PWM_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <changeARR+0x3c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000a4 	.word	0x200000a4
 8000604:	2000005c 	.word	0x2000005c

08000608 <changemod>:

// Hàm thay đổi mod
void changemod(uint8_t mod){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000612:	482f      	ldr	r0, [pc, #188]	@ (80006d0 <changemod+0xc8>)
 8000614:	f002 f920 	bl	8002858 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000618:	482e      	ldr	r0, [pc, #184]	@ (80006d4 <changemod+0xcc>)
 800061a:	f002 f91d 	bl	8002858 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <changemod+0xc8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_ADC_Stop_IT(&hadc1);
 8000626:	482c      	ldr	r0, [pc, #176]	@ (80006d8 <changemod+0xd0>)
 8000628:	f000 fd64 	bl	80010f4 <HAL_ADC_Stop_IT>
	switch(mod){
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3b01      	subs	r3, #1
 8000630:	2b04      	cmp	r3, #4
 8000632:	d848      	bhi.n	80006c6 <changemod+0xbe>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <changemod+0x34>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000651 	.word	0x08000651
 8000640:	08000661 	.word	0x08000661
 8000644:	08000671 	.word	0x08000671
 8000648:	08000691 	.word	0x08000691
 800064c:	080006a1 	.word	0x080006a1
		case 1:
			changeARR(4999);
 8000650:	f241 3087 	movw	r0, #4999	@ 0x1387
 8000654:	f7ff ffb8 	bl	80005c8 <changeARR>
			printf_uart(" Mode 1\n");
 8000658:	4820      	ldr	r0, [pc, #128]	@ (80006dc <changemod+0xd4>)
 800065a:	f7ff ff9f 	bl	800059c <printf_uart>
			break;
 800065e:	e032      	b.n	80006c6 <changemod+0xbe>
		case 2:
			changeARR(9999);
 8000660:	f242 700f 	movw	r0, #9999	@ 0x270f
 8000664:	f7ff ffb0 	bl	80005c8 <changeARR>
			printf_uart(" Mode 2\n");
 8000668:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <changemod+0xd8>)
 800066a:	f7ff ff97 	bl	800059c <printf_uart>
			break;
 800066e:	e02a      	b.n	80006c6 <changemod+0xbe>
		case 3:
			HAL_TIM_Base_Start_IT(&htim1);
 8000670:	4818      	ldr	r0, [pc, #96]	@ (80006d4 <changemod+0xcc>)
 8000672:	f002 f89f 	bl	80027b4 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(led_GPIO_Port,led_Pin,RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <changemod+0xdc>)
 800067c:	f001 fb22 	bl	8001cc4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <changemod+0xcc>)
 8000684:	f002 f966 	bl	8002954 <HAL_TIM_PWM_Start_IT>
			printf_uart(" Mode 3\n");
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <changemod+0xe0>)
 800068a:	f7ff ff87 	bl	800059c <printf_uart>
			break;
 800068e:	e01a      	b.n	80006c6 <changemod+0xbe>
		case 4:
			changeARR(2999);
 8000690:	f640 30b7 	movw	r0, #2999	@ 0xbb7
 8000694:	f7ff ff98 	bl	80005c8 <changeARR>
			printf_uart(" Mode 4\n");
 8000698:	4814      	ldr	r0, [pc, #80]	@ (80006ec <changemod+0xe4>)
 800069a:	f7ff ff7f 	bl	800059c <printf_uart>
			break;
 800069e:	e012      	b.n	80006c6 <changemod+0xbe>
		case 5:
			HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <changemod+0xcc>)
 80006a2:	f002 f887 	bl	80027b4 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(led_GPIO_Port,led_Pin,RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <changemod+0xdc>)
 80006ac:	f001 fb0a 	bl	8001cc4 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <changemod+0xcc>)
 80006b4:	f002 f94e 	bl	8002954 <HAL_TIM_PWM_Start_IT>
			printf_uart(" Mode 5\n");
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <changemod+0xe8>)
 80006ba:	f7ff ff6f 	bl	800059c <printf_uart>
			HAL_ADC_Start_IT(&hadc1);
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <changemod+0xd0>)
 80006c0:	f000 fc62 	bl	8000f88 <HAL_ADC_Start_IT>
			break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	2000005c 	.word	0x2000005c
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	080045e8 	.word	0x080045e8
 80006e0:	080045f4 	.word	0x080045f4
 80006e4:	40010800 	.word	0x40010800
 80006e8:	08004600 	.word	0x08004600
 80006ec:	0800460c 	.word	0x0800460c
 80006f0:	08004618 	.word	0x08004618

080006f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <HAL_UART_RxCpltCallback+0x3c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10f      	bne.n	8000726 <HAL_UART_RxCpltCallback+0x32>
		 mod=rxByte-'0';//do giá trị UART nhận được là ASCII nên -'0' để đưa về INT
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_UART_RxCpltCallback+0x40>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3b30      	subs	r3, #48	@ 0x30
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_UART_RxCpltCallback+0x44>)
 8000710:	701a      	strb	r2, [r3, #0]
		 changemod(mod);
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_UART_RxCpltCallback+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff76 	bl	8000608 <changemod>
		 HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxByte, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	4905      	ldr	r1, [pc, #20]	@ (8000734 <HAL_UART_RxCpltCallback+0x40>)
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <HAL_UART_RxCpltCallback+0x48>)
 8000722:	f003 f999 	bl	8003a58 <HAL_UART_Receive_IT>
	 }
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013800 	.word	0x40013800
 8000734:	20000134 	.word	0x20000134
 8000738:	20000137 	.word	0x20000137
 800073c:	200000ec 	.word	0x200000ec

08000740 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000750:	d103      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000752:	2108      	movs	r1, #8
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000756:	f001 facd 	bl	8001cf4 <HAL_GPIO_TogglePin>
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010800 	.word	0x40010800

08000768 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d129      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		if(mod == 3){
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d125      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
			if(flag==0){
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d110      	bne.n	80007ac <HAL_TIM_PWM_PulseFinishedCallback+0x44>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, count);
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
				if(count-- == 1) {
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	b291      	uxth	r1, r2
 800079c:	4a11      	ldr	r2, [pc, #68]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800079e:	8011      	strh	r1, [r2, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d114      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
					flag=1;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
					flag=0;
				}
			}
		}
	}
}
 80007aa:	e010      	b.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, count);
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
				if(count++ == 1000) {
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	b291      	uxth	r1, r2
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007c0:	8011      	strh	r1, [r2, #0]
 80007c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007c6:	d102      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
					flag=0;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	20000137 	.word	0x20000137
 80007e0:	20000135 	.word	0x20000135
 80007e4:	20000000 	.word	0x20000000
 80007e8:	2000005c 	.word	0x2000005c

080007ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d12a      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x66>
		if(HAL_GetTick() - last_tick > 200){//tránh nhiễu
 80007fc:	f000 fae2 	bl	8000dc4 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	4b2a      	ldr	r3, [pc, #168]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	2bc8      	cmp	r3, #200	@ 0xc8
 800080a:	d94b      	bls.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
			mod++;
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000816:	701a      	strb	r2, [r3, #0]
			if(mod > 3 && mod < 5) mod = 5;
 8000818:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d906      	bls.n	800082e <HAL_GPIO_EXTI_Callback+0x42>
 8000820:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d802      	bhi.n	800082e <HAL_GPIO_EXTI_Callback+0x42>
 8000828:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800082a:	2205      	movs	r2, #5
 800082c:	701a      	strb	r2, [r3, #0]
			if(mod > 5) mod = 1;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b05      	cmp	r3, #5
 8000834:	d902      	bls.n	800083c <HAL_GPIO_EXTI_Callback+0x50>
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
			changemod(mod);
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fee1 	bl	8000608 <changemod>
			last_tick = HAL_GetTick();
 8000846:	f000 fabd 	bl	8000dc4 <HAL_GetTick>
 800084a:	4603      	mov	r3, r0
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 800084e:	6013      	str	r3, [r2, #0]
				changemod(mod);
			}
			last_tick = HAL_GetTick();
		}
	}
}
 8000850:	e028      	b.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
	else if(GPIO_Pin==Nhan3s_Pin){
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b08      	cmp	r3, #8
 8000856:	d125      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
		if(HAL_GetTick() - last_tick > 50){
 8000858:	f000 fab4 	bl	8000dc4 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b32      	cmp	r3, #50	@ 0x32
 8000866:	d91d      	bls.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
			if(flag_nhan==0) {
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <HAL_GPIO_EXTI_Callback+0x98>
				changemod(4);
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fec9 	bl	8000608 <changemod>
				flag_nhan++;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e00a      	b.n	800089a <HAL_GPIO_EXTI_Callback+0xae>
				flag_nhan=0;
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
				printf_uart(" turn back ");
 800088a:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800088c:	f7ff fe86 	bl	800059c <printf_uart>
				changemod(mod);
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff feb7 	bl	8000608 <changemod>
			last_tick = HAL_GetTick();
 800089a:	f000 fa93 	bl	8000dc4 <HAL_GetTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a02      	ldr	r2, [pc, #8]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000138 	.word	0x20000138
 80008b0:	20000137 	.word	0x20000137
 80008b4:	20000136 	.word	0x20000136
 80008b8:	08004624 	.word	0x08004624

080008bc <HAL_ADC_ConvCpltCallback>:
// Ham ITR cua ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000908 <HAL_ADC_ConvCpltCallback+0x4c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d117      	bne.n	80008fe <HAL_ADC_ConvCpltCallback+0x42>
		adc_value= HAL_ADC_GetValue(&hadc1);
 80008ce:	480f      	ldr	r0, [pc, #60]	@ (800090c <HAL_ADC_ConvCpltCallback+0x50>)
 80008d0:	f000 fc44 	bl	800115c <HAL_ADC_GetValue>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <HAL_ADC_ConvCpltCallback+0x54>)
 80008da:	801a      	strh	r2, [r3, #0]
		uint16_t pwm_value = (adc_value * __HAL_TIM_GET_AUTORELOAD(&htim1))/4000;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <HAL_ADC_ConvCpltCallback+0x54>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_ADC_ConvCpltCallback+0x58>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <HAL_ADC_ConvCpltCallback+0x5c>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	81fb      	strh	r3, [r7, #14]
		//công thức giúp đưa giá trị lấy được bằng ADC về cùng khoảng với giá trị ARR của TIM1
		// vì giá trị cao nhất của ADC là 4095 nên chia 4000 để khi ADC đạt giá trị cao nhất thì sẽ là 1001+ khi đó đèn tắt hẵn
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <HAL_ADC_ConvCpltCallback+0x58>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	89fa      	ldrh	r2, [r7, #14]
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
    }
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40012400 	.word	0x40012400
 800090c:	2000002c 	.word	0x2000002c
 8000910:	2000013c 	.word	0x2000013c
 8000914:	2000005c 	.word	0x2000005c
 8000918:	10624dd3 	.word	0x10624dd3

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b19      	ldr	r3, [pc, #100]	@ (8000994 <HAL_MspInit+0x6c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <HAL_MspInit+0x6c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <HAL_MspInit+0x6c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <HAL_MspInit+0x6c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <HAL_MspInit+0x6c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x6c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2001      	movs	r0, #1
 8000964:	f000 ff41 	bl	80017ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000968:	2001      	movs	r0, #1
 800096a:	f000 ff5a 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_MspInit+0x70>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_MspInit+0x70>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a18      	ldr	r2, [pc, #96]	@ (8000a18 <HAL_ADC_MspInit+0x7c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d129      	bne.n	8000a10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a10      	ldr	r2, [pc, #64]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <HAL_ADC_MspInit+0x80>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ec:	2302      	movs	r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4809      	ldr	r0, [pc, #36]	@ (8000a20 <HAL_ADC_MspInit+0x84>)
 80009fc:	f000 ffde 	bl	80019bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	2012      	movs	r0, #18
 8000a06:	f000 fef0 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a0a:	2012      	movs	r0, #18
 8000a0c:	f000 ff09 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40012400 	.word	0x40012400
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800

08000a24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a11      	ldr	r2, [pc, #68]	@ (8000a78 <HAL_TIM_PWM_MspInit+0x54>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d11b      	bne.n	8000a6e <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <HAL_TIM_PWM_MspInit+0x58>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <HAL_TIM_PWM_MspInit+0x58>)
 8000a3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <HAL_TIM_PWM_MspInit+0x58>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2019      	movs	r0, #25
 8000a54:	f000 fec9 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fee2 	bl	8001822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	201b      	movs	r0, #27
 8000a64:	f000 fec1 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a68:	201b      	movs	r0, #27
 8000a6a:	f000 feda 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a90:	d113      	bne.n	8000aba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x44>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x44>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	61d3      	str	r3, [r2, #28]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x44>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	201c      	movs	r0, #28
 8000ab0:	f000 fe9b 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab4:	201c      	movs	r0, #28
 8000ab6:	f000 feb4 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <HAL_TIM_MspPostInit+0x5c>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d118      	bne.n	8000b1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_TIM_MspPostInit+0x60>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <HAL_TIM_MspPostInit+0x60>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_TIM_MspPostInit+0x60>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <HAL_TIM_MspPostInit+0x64>)
 8000b16:	f000 ff51 	bl	80019bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010800 	.word	0x40010800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a20      	ldr	r2, [pc, #128]	@ (8000bcc <HAL_UART_MspInit+0x9c>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d139      	bne.n	8000bc4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a18      	ldr	r2, [pc, #96]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	480f      	ldr	r0, [pc, #60]	@ (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b96:	f000 ff11 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4809      	ldr	r0, [pc, #36]	@ (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000bb0:	f000 ff04 	bl	80019bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2025      	movs	r0, #37	@ 0x25
 8000bba:	f000 fe16 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bbe:	2025      	movs	r0, #37	@ 0x25
 8000bc0:	f000 fe2f 	bl	8001822 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8ba 	bl	8000da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000c34:	f001 f890 	bl	8001d58 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f001 f871 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Nhan3s_Pin);
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f001 f86a 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <ADC1_2_IRQHandler+0x10>)
 8000c5e:	f000 fa89 	bl	8001174 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000002c 	.word	0x2000002c

08000c6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <TIM1_UP_IRQHandler+0x10>)
 8000c72:	f002 f811 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000005c 	.word	0x2000005c

08000c80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM1_CC_IRQHandler+0x10>)
 8000c86:	f002 f807 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000005c 	.word	0x2000005c

08000c94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <TIM2_IRQHandler+0x10>)
 8000c9a:	f001 fffd 	bl	8002c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a4 	.word	0x200000a4

08000ca8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <USART1_IRQHandler+0x10>)
 8000cae:	f002 fef9 	bl	8003aa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000ec 	.word	0x200000ec

08000cbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc8:	f7ff fff8 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cce:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce4:	4c09      	ldr	r4, [pc, #36]	@ (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f003 fc49 	bl	8004588 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fa31 	bl	800015c <main>
  bx lr
 8000cfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d04:	0800466c 	.word	0x0800466c
  ldr r2, =_sbss
 8000d08:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d0c:	20000144 	.word	0x20000144

08000d10 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <CAN1_RX1_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x28>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 fd55 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f000 f808 	bl	8000d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fdfa 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40022000 	.word	0x40022000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_InitTick+0x54>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x58>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fd6d 	bl	800183e <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00e      	b.n	8000d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d80a      	bhi.n	8000d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f000 fd35 	bl	80017ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d80:	4a06      	ldr	r2, [pc, #24]	@ (8000d9c <HAL_InitTick+0x5c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
 8000d88:	e000      	b.n	8000d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20000004 	.word	0x20000004
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000008 	.word	0x20000008

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_IncTick+0x1c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a03      	ldr	r2, [pc, #12]	@ (8000dc0 <HAL_IncTick+0x20>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	20000140 	.word	0x20000140

08000dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b02      	ldr	r3, [pc, #8]	@ (8000dd4 <HAL_GetTick+0x10>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000140 	.word	0x20000140

08000dd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e0be      	b.n	8000f78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d109      	bne.n	8000e1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fdc0 	bl	800099c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 fbc3 	bl	80015a8 <ADC_ConversionStop_Disable>
 8000e22:	4603      	mov	r3, r0
 8000e24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8099 	bne.w	8000f66 <HAL_ADC_Init+0x18e>
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 8095 	bne.w	8000f66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e44:	f023 0302 	bic.w	r3, r3, #2
 8000e48:	f043 0202 	orr.w	r2, r3, #2
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7b1b      	ldrb	r3, [r3, #12]
 8000e5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e70:	d003      	beq.n	8000e7a <HAL_ADC_Init+0xa2>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_ADC_Init+0xa8>
 8000e7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e7e:	e000      	b.n	8000e82 <HAL_ADC_Init+0xaa>
 8000e80:	2300      	movs	r3, #0
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7d1b      	ldrb	r3, [r3, #20]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d119      	bne.n	8000ec4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7b1b      	ldrb	r3, [r3, #12]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d109      	bne.n	8000eac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	035a      	lsls	r2, r3, #13
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	e00b      	b.n	8000ec4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb0:	f043 0220 	orr.w	r2, r3, #32
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <HAL_ADC_Init+0x1a8>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	6812      	ldr	r2, [r2, #0]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ef4:	d003      	beq.n	8000efe <HAL_ADC_Init+0x126>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d104      	bne.n	8000f08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	051b      	lsls	r3, r3, #20
 8000f06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	4b18      	ldr	r3, [pc, #96]	@ (8000f84 <HAL_ADC_Init+0x1ac>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10b      	bne.n	8000f44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	f043 0201 	orr.w	r2, r3, #1
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f42:	e018      	b.n	8000f76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f48:	f023 0312 	bic.w	r3, r3, #18
 8000f4c:	f043 0210 	orr.w	r2, r3, #16
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	f043 0201 	orr.w	r2, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f64:	e007      	b.n	8000f76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6a:	f043 0210 	orr.w	r2, r3, #16
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	ffe1f7fd 	.word	0xffe1f7fd
 8000f84:	ff1f0efe 	.word	0xff1f0efe

08000f88 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Start_IT+0x1a>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e0a0      	b.n	80010e4 <HAL_ADC_Start_IT+0x15c>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 faa2 	bl	80014f4 <ADC_Enable>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 808f 	bne.w	80010da <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a45      	ldr	r2, [pc, #276]	@ (80010ec <HAL_ADC_Start_IT+0x164>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d105      	bne.n	8000fe6 <HAL_ADC_Start_IT+0x5e>
 8000fda:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <HAL_ADC_Start_IT+0x168>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d115      	bne.n	8001012 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d026      	beq.n	800104e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001004:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001008:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001010:	e01d      	b.n	800104e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001016:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a33      	ldr	r2, [pc, #204]	@ (80010f0 <HAL_ADC_Start_IT+0x168>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d004      	beq.n	8001032 <HAL_ADC_Start_IT+0xaa>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2f      	ldr	r2, [pc, #188]	@ (80010ec <HAL_ADC_Start_IT+0x164>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_ADC_Start_IT+0xc6>
 8001032:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <HAL_ADC_Start_IT+0x168>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001042:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001046:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800105e:	f023 0206 	bic.w	r2, r3, #6
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001066:	e002      	b.n	800106e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f06f 0202 	mvn.w	r2, #2
 800107e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0220 	orr.w	r2, r2, #32
 800108e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800109a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800109e:	d113      	bne.n	80010c8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010a4:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_ADC_Start_IT+0x164>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d105      	bne.n	80010b6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_ADC_Start_IT+0x168>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d108      	bne.n	80010c8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	e00c      	b.n	80010e2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e003      	b.n	80010e2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40012800 	.word	0x40012800
 80010f0:	40012400 	.word	0x40012400

080010f4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Stop_IT+0x1a>
 800110a:	2302      	movs	r3, #2
 800110c:	e022      	b.n	8001154 <HAL_ADC_Stop_IT+0x60>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fa46 	bl	80015a8 <ADC_ConversionStop_Disable>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0220 	bic.w	r2, r2, #32
 8001134:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03e      	beq.n	8001214 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d039      	beq.n	8001214 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80011c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80011c6:	d11d      	bne.n	8001204 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d119      	bne.n	8001204 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d105      	bne.n	8001204 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fb59 	bl	80008bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f06f 0212 	mvn.w	r2, #18
 8001212:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d04d      	beq.n	80012ba <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d048      	beq.n	80012ba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001238:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800124a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800124e:	d012      	beq.n	8001276 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800125a:	2b00      	cmp	r3, #0
 800125c:	d125      	bne.n	80012aa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001268:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800126c:	d11d      	bne.n	80012aa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001284:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f9bd 	bl	800162a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f06f 020c 	mvn.w	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d012      	beq.n	80012ea <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00d      	beq.n	80012ea <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f809 	bl	80012f2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f06f 0201 	mvn.w	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x20>
 8001320:	2302      	movs	r3, #2
 8001322:	e0dc      	b.n	80014de <HAL_ADC_ConfigChannel+0x1da>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b06      	cmp	r3, #6
 8001332:	d81c      	bhi.n	800136e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	3b05      	subs	r3, #5
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3b05      	subs	r3, #5
 8001360:	fa00 f203 	lsl.w	r2, r0, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34
 800136c:	e03c      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b0c      	cmp	r3, #12
 8001374:	d81c      	bhi.n	80013b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b23      	subs	r3, #35	@ 0x23
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	4019      	ands	r1, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6818      	ldr	r0, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	3b23      	subs	r3, #35	@ 0x23
 80013a2:	fa00 f203 	lsl.w	r2, r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ae:	e01b      	b.n	80013e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b41      	subs	r3, #65	@ 0x41
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	4019      	ands	r1, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b41      	subs	r3, #65	@ 0x41
 80013dc:	fa00 f203 	lsl.w	r2, r0, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d91c      	bls.n	800142a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	3b1e      	subs	r3, #30
 8001402:	2207      	movs	r2, #7
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	4019      	ands	r1, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6898      	ldr	r0, [r3, #8]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4613      	mov	r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4413      	add	r3, r2
 800141a:	3b1e      	subs	r3, #30
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	e019      	b.n	800145e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	2207      	movs	r2, #7
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	4019      	ands	r1, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6898      	ldr	r0, [r3, #8]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b10      	cmp	r3, #16
 8001464:	d003      	beq.n	800146e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800146a:	2b11      	cmp	r3, #17
 800146c:	d132      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d125      	bne.n	80014c4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d126      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001494:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b10      	cmp	r3, #16
 800149c:	d11a      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_ADC_ConfigChannel+0x1e8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <HAL_ADC_ConfigChannel+0x1ec>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	0c9a      	lsrs	r2, r3, #18
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b4:	e002      	b.n	80014bc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f9      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x1b2>
 80014c2:	e007      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40012400 	.word	0x40012400
 80014ec:	20000004 	.word	0x20000004
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d040      	beq.n	8001594 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0201 	orr.w	r2, r2, #1
 8001520:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <ADC_Enable+0xac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a1f      	ldr	r2, [pc, #124]	@ (80015a4 <ADC_Enable+0xb0>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001530:	e002      	b.n	8001538 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800153e:	f7ff fc41 	bl	8000dc4 <HAL_GetTick>
 8001542:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001544:	e01f      	b.n	8001586 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001546:	f7ff fc3d 	bl	8000dc4 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d918      	bls.n	8001586 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d011      	beq.n	8001586 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001572:	f043 0201 	orr.w	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e007      	b.n	8001596 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d1d8      	bne.n	8001546 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000004 	.word	0x20000004
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d12e      	bne.n	8001620 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015d2:	f7ff fbf7 	bl	8000dc4 <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015d8:	e01b      	b.n	8001612 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80015da:	f7ff fbf3 	bl	8000dc4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d914      	bls.n	8001612 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10d      	bne.n	8001612 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	f043 0201 	orr.w	r2, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e007      	b.n	8001622 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d0dc      	beq.n	80015da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4906      	ldr	r1, [pc, #24]	@ (80016d4 <__NVIC_EnableIRQ+0x34>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100

080016d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db0a      	blt.n	8001702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	490c      	ldr	r1, [pc, #48]	@ (8001724 <__NVIC_SetPriority+0x4c>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	440b      	add	r3, r1
 80016fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001700:	e00a      	b.n	8001718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4908      	ldr	r1, [pc, #32]	@ (8001728 <__NVIC_SetPriority+0x50>)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	3b04      	subs	r3, #4
 8001710:	0112      	lsls	r2, r2, #4
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	440b      	add	r3, r1
 8001716:	761a      	strb	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f1c3 0307 	rsb	r3, r3, #7
 8001746:	2b04      	cmp	r3, #4
 8001748:	bf28      	it	cs
 800174a:	2304      	movcs	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3304      	adds	r3, #4
 8001752:	2b06      	cmp	r3, #6
 8001754:	d902      	bls.n	800175c <NVIC_EncodePriority+0x30>
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3b03      	subs	r3, #3
 800175a:	e000      	b.n	800175e <NVIC_EncodePriority+0x32>
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	f04f 32ff 	mov.w	r2, #4294967295
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	401a      	ands	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	43d9      	mvns	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	4313      	orrs	r3, r2
         );
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff90 	bl	80016d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff2d 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff42 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff90 	bl	800172c <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5f 	bl	80016d8 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff35 	bl	80016a0 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d008      	beq.n	8001880 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e020      	b.n	80018c2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e051      	b.n	8001994 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020e 	bic.w	r2, r2, #14
 80018fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0201 	bic.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <HAL_DMA_Abort_IT+0xd4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d029      	beq.n	800196e <HAL_DMA_Abort_IT+0xa2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <HAL_DMA_Abort_IT+0xd8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_Abort_IT+0x9e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <HAL_DMA_Abort_IT+0xdc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_Abort_IT+0x98>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1e      	ldr	r2, [pc, #120]	@ (80019ac <HAL_DMA_Abort_IT+0xe0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d012      	beq.n	800195e <HAL_DMA_Abort_IT+0x92>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <HAL_DMA_Abort_IT+0xe4>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00a      	beq.n	8001958 <HAL_DMA_Abort_IT+0x8c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1b      	ldr	r2, [pc, #108]	@ (80019b4 <HAL_DMA_Abort_IT+0xe8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d102      	bne.n	8001952 <HAL_DMA_Abort_IT+0x86>
 800194c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001950:	e00e      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 8001952:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001956:	e00b      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 8001958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800195c:	e008      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 800195e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001962:	e005      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 8001964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001968:	e002      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 800196a:	2310      	movs	r3, #16
 800196c:	e000      	b.n	8001970 <HAL_DMA_Abort_IT+0xa4>
 800196e:	2301      	movs	r3, #1
 8001970:	4a11      	ldr	r2, [pc, #68]	@ (80019b8 <HAL_DMA_Abort_IT+0xec>)
 8001972:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	4798      	blx	r3
    } 
  }
  return status;
 8001994:	7bfb      	ldrb	r3, [r7, #15]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40020008 	.word	0x40020008
 80019a4:	4002001c 	.word	0x4002001c
 80019a8:	40020030 	.word	0x40020030
 80019ac:	40020044 	.word	0x40020044
 80019b0:	40020058 	.word	0x40020058
 80019b4:	4002006c 	.word	0x4002006c
 80019b8:	40020000 	.word	0x40020000

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	@ 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e169      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8158 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a9a      	ldr	r2, [pc, #616]	@ (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4a98      	ldr	r2, [pc, #608]	@ (8001c5c <HAL_GPIO_Init+0x2a0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4a98      	ldr	r2, [pc, #608]	@ (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a96      	ldr	r2, [pc, #600]	@ (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a96      	ldr	r2, [pc, #600]	@ (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a94      	ldr	r2, [pc, #592]	@ (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a94      	ldr	r2, [pc, #592]	@ (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a92      	ldr	r2, [pc, #584]	@ (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a92      	ldr	r2, [pc, #584]	@ (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a90      	ldr	r2, [pc, #576]	@ (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a79      	ldr	r2, [pc, #484]	@ (8001c70 <HAL_GPIO_Init+0x2b4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	@ 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	@ 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a4c      	ldr	r2, [pc, #304]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a48      	ldr	r2, [pc, #288]	@ (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d013      	beq.n	8001ba8 <HAL_GPIO_Init+0x1ec>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3f      	ldr	r2, [pc, #252]	@ (8001c80 <HAL_GPIO_Init+0x2c4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001c84 <HAL_GPIO_Init+0x2c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e4>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3d      	ldr	r2, [pc, #244]	@ (8001c88 <HAL_GPIO_Init+0x2cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	e004      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_GPIO_Init+0x1ee>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bac:	f002 0203 	and.w	r2, r2, #3
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	4093      	lsls	r3, r2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bba:	492f      	ldr	r1, [pc, #188]	@ (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	492c      	ldr	r1, [pc, #176]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4928      	ldr	r1, [pc, #160]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4922      	ldr	r1, [pc, #136]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0a:	4b20      	ldr	r3, [pc, #128]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	491e      	ldr	r1, [pc, #120]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4918      	ldr	r1, [pc, #96]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4914      	ldr	r1, [pc, #80]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d021      	beq.n	8001c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	490e      	ldr	r1, [pc, #56]	@ (8001c8c <HAL_GPIO_Init+0x2d0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e021      	b.n	8001c9e <HAL_GPIO_Init+0x2e2>
 8001c5a:	bf00      	nop
 8001c5c:	10320000 	.word	0x10320000
 8001c60:	10310000 	.word	0x10310000
 8001c64:	10220000 	.word	0x10220000
 8001c68:	10210000 	.word	0x10210000
 8001c6c:	10120000 	.word	0x10120000
 8001c70:	10110000 	.word	0x10110000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40010c00 	.word	0x40010c00
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40011400 	.word	0x40011400
 8001c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	4909      	ldr	r1, [pc, #36]	@ (8001cc0 <HAL_GPIO_Init+0x304>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001caa:	fa22 f303 	lsr.w	r3, r2, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f47f ae8e 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	372c      	adds	r7, #44	@ 0x2c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	611a      	str	r2, [r3, #16]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	041a      	lsls	r2, r3, #16
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43d9      	mvns	r1, r3
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	400b      	ands	r3, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	611a      	str	r2, [r3, #16]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fd50 	bl	80007ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001d68:	f000 f808 	bl	8001d7c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001d6c:	4b02      	ldr	r3, [pc, #8]	@ (8001d78 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001d6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d72:	615a      	str	r2, [r3, #20]
  }
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e272      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da8:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d00c      	beq.n	8001dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 030c 	and.w	r3, r3, #12
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d112      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dcc:	d10b      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dce:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d06c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d168      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e24c      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dee:	d106      	bne.n	8001dfe <HAL_RCC_OscConfig+0x76>
 8001df0:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	e02e      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10c      	bne.n	8001e20 <HAL_RCC_OscConfig+0x98>
 8001e06:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b78      	ldr	r3, [pc, #480]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a77      	ldr	r2, [pc, #476]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e01d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0xbc>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a71      	ldr	r2, [pc, #452]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
 8001e44:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b68      	ldr	r3, [pc, #416]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a67      	ldr	r2, [pc, #412]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe ffae 	bl	8000dc4 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe ffaa 	bl	8000dc4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e200      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0xe4>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff9a 	bl	8000dc4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff96 	bl	8000dc4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1ec      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x10c>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ece:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
 8001eda:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b43      	ldr	r3, [pc, #268]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1c0      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4939      	ldr	r1, [pc, #228]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7fe ff4f 	bl	8000dc4 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7fe ff4b 	bl	8000dc4 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1a1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4927      	ldr	r1, [pc, #156]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7fe ff2e 	bl	8000dc4 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7fe ff2a 	bl	8000dc4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e180      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d03a      	beq.n	800200c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa4:	f7fe ff0e 	bl	8000dc4 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe ff0a 	bl	8000dc4 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e160      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 face 	bl	800256c <RCC_Delay>
 8001fd0:	e01c      	b.n	800200c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fef4 	bl	8000dc4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fef0 	bl	8000dc4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d908      	bls.n	8002000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e146      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	42420000 	.word	0x42420000
 8001ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b92      	ldr	r3, [pc, #584]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1e9      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a6 	beq.w	8002166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201e:	4b8b      	ldr	r3, [pc, #556]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10d      	bne.n	8002046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	4a87      	ldr	r2, [pc, #540]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	61d3      	str	r3, [r2, #28]
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	2301      	movs	r3, #1
 8002044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002052:	4b7f      	ldr	r3, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7e      	ldr	r2, [pc, #504]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205e:	f7fe feb1 	bl	8000dc4 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002066:	f7fe fead 	bl	8000dc4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b64      	cmp	r3, #100	@ 0x64
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e103      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <HAL_RCC_OscConfig+0x4c8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x312>
 800208c:	4b6f      	ldr	r3, [pc, #444]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e02d      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x334>
 80020a2:	4b6a      	ldr	r3, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a69      	ldr	r2, [pc, #420]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e01c      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b05      	cmp	r3, #5
 80020c2:	d10c      	bne.n	80020de <HAL_RCC_OscConfig+0x356>
 80020c4:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a60      	ldr	r2, [pc, #384]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e00b      	b.n	80020f6 <HAL_RCC_OscConfig+0x36e>
 80020de:	4b5b      	ldr	r3, [pc, #364]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a5a      	ldr	r2, [pc, #360]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4b58      	ldr	r3, [pc, #352]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a57      	ldr	r2, [pc, #348]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7fe fe61 	bl	8000dc4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fe5d 	bl	8000dc4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002114:	4293      	cmp	r3, r2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e0b1      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	4b4b      	ldr	r3, [pc, #300]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ee      	beq.n	8002106 <HAL_RCC_OscConfig+0x37e>
 8002128:	e014      	b.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212a:	f7fe fe4b 	bl	8000dc4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f7fe fe47 	bl	8000dc4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002140:	4293      	cmp	r3, r2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e09b      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002148:	4b40      	ldr	r3, [pc, #256]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ee      	bne.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a3b      	ldr	r2, [pc, #236]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 8087 	beq.w	800227e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002170:	4b36      	ldr	r3, [pc, #216]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	2b08      	cmp	r3, #8
 800217a:	d061      	beq.n	8002240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d146      	bne.n	8002212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b33      	ldr	r3, [pc, #204]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7fe fe1b 	bl	8000dc4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fe17 	bl	8000dc4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e06d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ba:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	4921      	ldr	r1, [pc, #132]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	430b      	orrs	r3, r1
 80021de:	491b      	ldr	r1, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fdeb 	bl	8000dc4 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fde7 	bl	8000dc4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e03d      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x46a>
 8002210:	e035      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fdd4 	bl	8000dc4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fdd0 	bl	8000dc4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e026      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_OscConfig+0x4c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x498>
 800223e:	e01e      	b.n	800227e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e019      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x500>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	429a      	cmp	r2, r3
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a0:	4b6a      	ldr	r3, [pc, #424]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d910      	bls.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4b67      	ldr	r3, [pc, #412]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0207 	bic.w	r2, r3, #7
 80022b6:	4965      	ldr	r1, [pc, #404]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b63      	ldr	r3, [pc, #396]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b8      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d020      	beq.n	800231e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a58      	ldr	r2, [pc, #352]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800230a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b50      	ldr	r3, [pc, #320]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	494d      	ldr	r1, [pc, #308]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d115      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e07f      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e073      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4936      	ldr	r1, [pc, #216]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fd22 	bl	8000dc4 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fd1e 	bl	8000dc4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e053      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d210      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4922      	ldr	r1, [pc, #136]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e032      	b.n	8002442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d009      	beq.n	800241a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	490e      	ldr	r1, [pc, #56]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241a:	f000 f821 	bl	8002460 <HAL_RCC_GetSysClockFreq>
 800241e:	4602      	mov	r2, r0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	490a      	ldr	r1, [pc, #40]	@ (8002454 <HAL_RCC_ClockConfig+0x1c8>)
 800242c:	5ccb      	ldrb	r3, [r1, r3]
 800242e:	fa22 f303 	lsr.w	r3, r2, r3
 8002432:	4a09      	ldr	r2, [pc, #36]	@ (8002458 <HAL_RCC_ClockConfig+0x1cc>)
 8002434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_ClockConfig+0x1d0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc80 	bl	8000d40 <HAL_InitTick>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
 8002454:	08004630 	.word	0x08004630
 8002458:	20000004 	.word	0x20000004
 800245c:	20000008 	.word	0x20000008

08002460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x30>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x36>
 800248e:	e027      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e027      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	4a17      	ldr	r2, [pc, #92]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a0:	5cd3      	ldrb	r3, [r2, r3]
 80024a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	0c5b      	lsrs	r3, r3, #17
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	4a11      	ldr	r2, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	e004      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d4:	fb02 f303 	mul.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	613b      	str	r3, [r7, #16]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e6:	693b      	ldr	r3, [r7, #16]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	08004648 	.word	0x08004648
 8002500:	08004658 	.word	0x08004658
 8002504:	003d0900 	.word	0x003d0900

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	@ (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	20000004 	.word	0x20000004

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4903      	ldr	r1, [pc, #12]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08004640 	.word	0x08004640

08002544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002548:	f7ff ffde 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0adb      	lsrs	r3, r3, #11
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	@ (8002568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	08004640 	.word	0x08004640

0800256c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <RCC_Delay+0x34>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <RCC_Delay+0x38>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002588:	bf00      	nop
  }
  while (Delay --);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f9      	bne.n	8002588 <RCC_Delay+0x1c>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000004 	.word	0x20000004
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d07d      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10d      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	61d3      	str	r3, [r2, #28]
 80025e0:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d118      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fc:	4b43      	ldr	r3, [pc, #268]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a42      	ldr	r2, [pc, #264]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002608:	f7fe fbdc 	bl	8000dc4 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	e008      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002610:	f7fe fbd8 	bl	8000dc4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e06d      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262e:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02e      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d027      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800264c:	4b2e      	ldr	r3, [pc, #184]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002654:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002656:	4b2e      	ldr	r3, [pc, #184]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800265c:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002662:	4a29      	ldr	r2, [pc, #164]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d014      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe fba7 	bl	8000dc4 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fba3 	bl	8000dc4 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e036      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ee      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4917      	ldr	r1, [pc, #92]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a13      	ldr	r2, [pc, #76]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	490b      	ldr	r1, [pc, #44]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ea:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4904      	ldr	r1, [pc, #16]	@ (8002708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	42420440 	.word	0x42420440

08002714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e041      	b.n	80027aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f9a0 	bl	8000a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	4619      	mov	r1, r3
 8002752:	4610      	mov	r0, r2
 8002754:	f000 fd34 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e03a      	b.n	8002842 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a18      	ldr	r2, [pc, #96]	@ (800284c <HAL_TIM_Base_Start_IT+0x98>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00e      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x58>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f6:	d009      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x58>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <HAL_TIM_Base_Start_IT+0x9c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_TIM_Base_Start_IT+0x58>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a13      	ldr	r2, [pc, #76]	@ (8002854 <HAL_TIM_Base_Start_IT+0xa0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b06      	cmp	r3, #6
 800281c:	d010      	beq.n	8002840 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0201 	orr.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282e:	e007      	b.n	8002840 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800

08002858 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	f241 1311 	movw	r3, #4369	@ 0x1111
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10f      	bne.n	80028a0 <HAL_TIM_Base_Stop_IT+0x48>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	f240 4344 	movw	r3, #1092	@ 0x444
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_Base_Stop_IT+0x48>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e041      	b.n	800294a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe f8a2 	bl	8000a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fc64 	bl	80031c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_TIM_PWM_Start_IT+0x28>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e022      	b.n	80029c2 <HAL_TIM_PWM_Start_IT+0x6e>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d109      	bne.n	8002996 <HAL_TIM_PWM_Start_IT+0x42>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	bf14      	ite	ne
 800298e:	2301      	movne	r3, #1
 8002990:	2300      	moveq	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e015      	b.n	80029c2 <HAL_TIM_PWM_Start_IT+0x6e>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d109      	bne.n	80029b0 <HAL_TIM_PWM_Start_IT+0x5c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e008      	b.n	80029c2 <HAL_TIM_PWM_Start_IT+0x6e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0a9      	b.n	8002b1e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <HAL_TIM_PWM_Start_IT+0x86>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029d8:	e013      	b.n	8002a02 <HAL_TIM_PWM_Start_IT+0xae>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start_IT+0x96>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e8:	e00b      	b.n	8002a02 <HAL_TIM_PWM_Start_IT+0xae>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start_IT+0xa6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f8:	e003      	b.n	8002a02 <HAL_TIM_PWM_Start_IT+0xae>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d841      	bhi.n	8002a8c <HAL_TIM_PWM_Start_IT+0x138>
 8002a08:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a45 	.word	0x08002a45
 8002a14:	08002a8d 	.word	0x08002a8d
 8002a18:	08002a8d 	.word	0x08002a8d
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	08002a57 	.word	0x08002a57
 8002a24:	08002a8d 	.word	0x08002a8d
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002a8d 	.word	0x08002a8d
 8002a30:	08002a69 	.word	0x08002a69
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a7b 	.word	0x08002a7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0202 	orr.w	r2, r2, #2
 8002a52:	60da      	str	r2, [r3, #12]
      break;
 8002a54:	e01d      	b.n	8002a92 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0204 	orr.w	r2, r2, #4
 8002a64:	60da      	str	r2, [r3, #12]
      break;
 8002a66:	e014      	b.n	8002a92 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0208 	orr.w	r2, r2, #8
 8002a76:	60da      	str	r2, [r3, #12]
      break;
 8002a78:	e00b      	b.n	8002a92 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0210 	orr.w	r2, r2, #16
 8002a88:	60da      	str	r2, [r3, #12]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d141      	bne.n	8002b1c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fe19 	bl	80036d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d107      	bne.n	8002ac0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002abe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00e      	beq.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x194>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x194>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIM_PWM_Start_IT+0x194>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d111      	bne.n	8002b0c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d010      	beq.n	8002b1c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	e007      	b.n	8002b1c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800

08002b34 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d841      	bhi.n	8002bcc <HAL_TIM_PWM_Stop_IT+0x98>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002bcd 	.word	0x08002bcd
 8002b58:	08002bcd 	.word	0x08002bcd
 8002b5c:	08002bcd 	.word	0x08002bcd
 8002b60:	08002b97 	.word	0x08002b97
 8002b64:	08002bcd 	.word	0x08002bcd
 8002b68:	08002bcd 	.word	0x08002bcd
 8002b6c:	08002bcd 	.word	0x08002bcd
 8002b70:	08002ba9 	.word	0x08002ba9
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002bcd 	.word	0x08002bcd
 8002b7c:	08002bcd 	.word	0x08002bcd
 8002b80:	08002bbb 	.word	0x08002bbb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0202 	bic.w	r2, r2, #2
 8002b92:	60da      	str	r2, [r3, #12]
      break;
 8002b94:	e01d      	b.n	8002bd2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0204 	bic.w	r2, r2, #4
 8002ba4:	60da      	str	r2, [r3, #12]
      break;
 8002ba6:	e014      	b.n	8002bd2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0208 	bic.w	r2, r2, #8
 8002bb6:	60da      	str	r2, [r3, #12]
      break;
 8002bb8:	e00b      	b.n	8002bd2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0210 	bic.w	r2, r2, #16
 8002bc8:	60da      	str	r2, [r3, #12]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fd79 	bl	80036d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2a      	ldr	r2, [pc, #168]	@ (8002c94 <HAL_TIM_PWM_Stop_IT+0x160>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d117      	bne.n	8002c20 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a1a      	ldr	r2, [r3, #32]
 8002bf6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_TIM_PWM_Stop_IT+0xec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_PWM_Stop_IT+0xec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a1a      	ldr	r2, [r3, #32]
 8002c26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1a      	ldr	r2, [r3, #32]
 8002c36:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_TIM_PWM_Stop_IT+0x12c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5e:	e013      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x154>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d104      	bne.n	8002c70 <HAL_TIM_PWM_Stop_IT+0x13c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c6e:	e00b      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x154>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d104      	bne.n	8002c80 <HAL_TIM_PWM_Stop_IT+0x14c>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7e:	e003      	b.n	8002c88 <HAL_TIM_PWM_Stop_IT+0x154>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d020      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01b      	beq.n	8002cfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0202 	mvn.w	r2, #2
 8002ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa5a 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa4d 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fd39 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d020      	beq.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01b      	beq.n	8002d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0204 	mvn.w	r2, #4
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fa34 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa27 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fd fd13 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d020      	beq.n	8002d94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0208 	mvn.w	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fa0e 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa01 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fd fced 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d020      	beq.n	8002de0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0210 	mvn.w	r2, #16
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2208      	movs	r2, #8
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9e8 	bl	800319c <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9db 	bl	800318a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fd fcc7 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0201 	mvn.w	r2, #1
 8002dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fc9e 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d007      	beq.n	8002e28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fd34 	bl	8003890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9b1 	bl	80031ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00c      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0220 	mvn.w	r2, #32
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fd07 	bl	800387e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e0ae      	b.n	8002ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f200 809f 	bhi.w	8002fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002fe5 	.word	0x08002fe5
 8002eb4:	08002fe5 	.word	0x08002fe5
 8002eb8:	08002fe5 	.word	0x08002fe5
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002fe5 	.word	0x08002fe5
 8002ec4:	08002fe5 	.word	0x08002fe5
 8002ec8:	08002fe5 	.word	0x08002fe5
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002fe5 	.word	0x08002fe5
 8002ed4:	08002fe5 	.word	0x08002fe5
 8002ed8:	08002fe5 	.word	0x08002fe5
 8002edc:	08002fa3 	.word	0x08002fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f9d8 	bl	800329c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	619a      	str	r2, [r3, #24]
      break;
 8002f1e:	e064      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68b9      	ldr	r1, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa1e 	bl	8003368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699a      	ldr	r2, [r3, #24]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	021a      	lsls	r2, r3, #8
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	619a      	str	r2, [r3, #24]
      break;
 8002f60:	e043      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fa67 	bl	800343c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0208 	orr.w	r2, r2, #8
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0204 	bic.w	r2, r2, #4
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
      break;
 8002fa0:	e023      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fab1 	bl	8003510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69d9      	ldr	r1, [r3, #28]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	021a      	lsls	r2, r3, #8
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	61da      	str	r2, [r3, #28]
      break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_TIM_ConfigClockSource+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e0b4      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x186>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800303e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003050:	d03e      	beq.n	80030d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003056:	f200 8087 	bhi.w	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305e:	f000 8086 	beq.w	800316e <HAL_TIM_ConfigClockSource+0x172>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	d87f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b70      	cmp	r3, #112	@ 0x70
 800306a:	d01a      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xa6>
 800306c:	2b70      	cmp	r3, #112	@ 0x70
 800306e:	d87b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b60      	cmp	r3, #96	@ 0x60
 8003072:	d050      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x11a>
 8003074:	2b60      	cmp	r3, #96	@ 0x60
 8003076:	d877      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b50      	cmp	r3, #80	@ 0x50
 800307a:	d03c      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xfa>
 800307c:	2b50      	cmp	r3, #80	@ 0x50
 800307e:	d873      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d058      	beq.n	8003136 <HAL_TIM_ConfigClockSource+0x13a>
 8003084:	2b40      	cmp	r3, #64	@ 0x40
 8003086:	d86f      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b30      	cmp	r3, #48	@ 0x30
 800308a:	d064      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800308c:	2b30      	cmp	r3, #48	@ 0x30
 800308e:	d86b      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d060      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d867      	bhi.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d05c      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d05a      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0x15a>
 80030a0:	e062      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030b2:	f000 faf2 	bl	800369a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
      break;
 80030ce:	e04f      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e0:	f000 fadb 	bl	800369a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030f2:	609a      	str	r2, [r3, #8]
      break;
 80030f4:	e03c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fa52 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2150      	movs	r1, #80	@ 0x50
 800310e:	4618      	mov	r0, r3
 8003110:	f000 faa9 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003114:	e02c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	461a      	mov	r2, r3
 8003124:	f000 fa70 	bl	8003608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2160      	movs	r1, #96	@ 0x60
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa99 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003134:	e01c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	461a      	mov	r2, r3
 8003144:	f000 fa32 	bl	80035ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fa89 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003154:	e00c      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f000 fa80 	bl	8003666 <TIM_ITRx_SetConfig>
      break;
 8003166:	e003      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e000      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800316e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031de:	d007      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <TIM_Base_SetConfig+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d003      	beq.n	80031f0 <TIM_Base_SetConfig+0x30>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003298 <TIM_Base_SetConfig+0xd8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d108      	bne.n	8003202 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a22      	ldr	r2, [pc, #136]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003210:	d007      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a1f      	ldr	r2, [pc, #124]	@ (8003294 <TIM_Base_SetConfig+0xd4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <TIM_Base_SetConfig+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a1e      	ldr	r2, [pc, #120]	@ (8003298 <TIM_Base_SetConfig+0xd8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	@ (8003290 <TIM_Base_SetConfig+0xd0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	611a      	str	r2, [r3, #16]
  }
}
 8003286:	bf00      	nop
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	bc80      	pop	{r7}
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800

0800329c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0201 	bic.w	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0302 	bic.w	r3, r3, #2
 80032e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <TIM_OC1_SetConfig+0xc8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10c      	bne.n	8003312 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f023 0308 	bic.w	r3, r3, #8
 80032fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <TIM_OC1_SetConfig+0xc8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00

08003368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 0210 	bic.w	r2, r3, #16
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <TIM_OC2_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10d      	bne.n	80033e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <TIM_OC2_SetConfig+0xd0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d113      	bne.n	8003414 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00

0800343c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <TIM_OC3_SetConfig+0xd0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10d      	bne.n	80034b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a14      	ldr	r2, [pc, #80]	@ (800350c <TIM_OC3_SetConfig+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d113      	bne.n	80034e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00

08003510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800355a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	031b      	lsls	r3, r3, #12
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a0f      	ldr	r2, [pc, #60]	@ (80035a8 <TIM_OC4_SetConfig+0x98>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d109      	bne.n	8003584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	019b      	lsls	r3, r3, #6
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	621a      	str	r2, [r3, #32]
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr
 80035a8:	40012c00 	.word	0x40012c00

080035ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0201 	bic.w	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f023 030a 	bic.w	r3, r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0210 	bic.w	r2, r3, #16
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	031b      	lsls	r3, r3, #12
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003644:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	bf00      	nop
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003666:	b480      	push	{r7}
 8003668:	b085      	sub	sp, #20
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	f043 0307 	orr.w	r3, r3, #7
 8003688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	609a      	str	r2, [r3, #8]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr

0800369a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	021a      	lsls	r2, r3, #8
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	609a      	str	r2, [r3, #8]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2201      	movs	r2, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1a      	ldr	r2, [r3, #32]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003734:	2302      	movs	r3, #2
 8003736:	e046      	b.n	80037c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a16      	ldr	r2, [pc, #88]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003784:	d009      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a12      	ldr	r2, [pc, #72]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a10      	ldr	r2, [pc, #64]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10c      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800

080037dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e03d      	b.n	8003874 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr

0800387e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e042      	b.n	800393a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd f931 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2224      	movs	r2, #36	@ 0x24
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fdb8 	bl	800445c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08a      	sub	sp, #40	@ 0x28
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b20      	cmp	r3, #32
 8003960:	d175      	bne.n	8003a4e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_UART_Transmit+0x2c>
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06e      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2221      	movs	r2, #33	@ 0x21
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003980:	f7fd fa20 	bl	8000dc4 <HAL_GetTick>
 8003984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	88fa      	ldrh	r2, [r7, #6]
 8003990:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399a:	d108      	bne.n	80039ae <HAL_UART_Transmit+0x6c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d104      	bne.n	80039ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	e003      	b.n	80039b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b6:	e02e      	b.n	8003a16 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	@ 0x80
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fb1d 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e03a      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10b      	bne.n	80039f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	3302      	adds	r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e007      	b.n	8003a08 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1cb      	bne.n	80039b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	@ 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fae9 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d112      	bne.n	8003a98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_UART_Receive_IT+0x26>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e00b      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb10 	bl	80040b4 <UART_Start_Receive_IT>
 8003a94:	4603      	mov	r3, r0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b0ba      	sub	sp, #232	@ 0xe8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ae2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10f      	bne.n	8003b0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d009      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
 8003af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fbec 	bl	80042e0 <UART_Receive_IT>
      return;
 8003b08:	e25b      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80de 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
 8003b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80d1 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
 8003b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc2:	f043 0208 	orr.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 81f2 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb77 	bl	80042e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_UART_IRQHandler+0x17a>
 8003c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04f      	beq.n	8003cbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa81 	bl	8004126 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d041      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1d9      	bne.n	8003c32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d013      	beq.n	8003cae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e84 <HAL_UART_IRQHandler+0x3e0>)
 8003c8c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fe1a 	bl	80018cc <HAL_DMA_Abort_IT>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d016      	beq.n	8003ccc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	e00e      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f993 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	e00a      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f98f 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbc:	e006      	b.n	8003ccc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f98b 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003cca:	e175      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ccc:	bf00      	nop
    return;
 8003cce:	e173      	b.n	8003fb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 814f 	bne.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8148 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8141 	beq.w	8003f78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80b6 	beq.w	8003e88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8145 	beq.w	8003fbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f080 813e 	bcs.w	8003fbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d46:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f000 8088 	beq.w	8003e64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d80:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1d9      	bne.n	8003d54 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003db0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003dc4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dcc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e1      	bne.n	8003da0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3314      	adds	r3, #20
 8003dfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e06:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e46:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e48:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e3      	bne.n	8003e22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd fcf9 	bl	8001856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8b6 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e80:	e09c      	b.n	8003fbc <HAL_UART_IRQHandler+0x518>
 8003e82:	bf00      	nop
 8003e84:	080041eb 	.word	0x080041eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 808e 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8089 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e3      	bne.n	8003eae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3314      	adds	r3, #20
 8003f06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e3      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	330c      	adds	r3, #12
 8003f4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f50:	61fa      	str	r2, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	69b9      	ldr	r1, [r7, #24]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e3      	bne.n	8003f2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f83b 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f76:	e023      	b.n	8003fc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f93e 	bl	8004212 <UART_Transmit_IT>
    return;
 8003f96:	e014      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
 8003fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f97d 	bl	80042b0 <UART_EndTransmit_IT>
    return;
 8003fb6:	e004      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fb8:	bf00      	nop
 8003fba:	e002      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fbc:	bf00      	nop
 8003fbe:	e000      	b.n	8003fc2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fc0:	bf00      	nop
  }
}
 8003fc2:	37e8      	adds	r7, #232	@ 0xe8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	e03b      	b.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d037      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fc fed2 	bl	8000dc4 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e03a      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d023      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b80      	cmp	r3, #128	@ 0x80
 8004048:	d020      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d01d      	beq.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b08      	cmp	r3, #8
 800405c:	d116      	bne.n	800408c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f856 	bl	8004126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2208      	movs	r2, #8
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00f      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d0b4      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	4613      	mov	r3, r2
 80040c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2222      	movs	r2, #34	@ 0x22
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695a      	ldr	r2, [r3, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0220 	orr.w	r2, r2, #32
 8004118:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004126:	b480      	push	{r7}
 8004128:	b095      	sub	sp, #84	@ 0x54
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004140:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800414e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004150:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004154:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800415c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e5      	bne.n	800412e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	61fb      	str	r3, [r7, #28]
   return(result);
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004182:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004184:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e5      	bne.n	8004162 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419a:	2b01      	cmp	r3, #1
 800419c:	d119      	bne.n	80041d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0310 	bic.w	r3, r3, #16
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041be:	61ba      	str	r2, [r7, #24]
 80041c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	613b      	str	r3, [r7, #16]
   return(result);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041e0:	bf00      	nop
 80041e2:	3754      	adds	r7, #84	@ 0x54
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f7ff fee8 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b21      	cmp	r3, #33	@ 0x21
 8004224:	d13e      	bne.n	80042a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422e:	d114      	bne.n	800425a <UART_Transmit_IT+0x48>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d110      	bne.n	800425a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]
 8004258:	e008      	b.n	800426c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6211      	str	r1, [r2, #32]
 8004264:	781a      	ldrb	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29b      	uxth	r3, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	4619      	mov	r1, r3
 800427a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800428e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800429e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff fe79 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	@ 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b22      	cmp	r3, #34	@ 0x22
 80042f2:	f040 80ae 	bne.w	8004452 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fe:	d117      	bne.n	8004330 <UART_Receive_IT+0x50>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d113      	bne.n	8004330 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	b29a      	uxth	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	629a      	str	r2, [r3, #40]	@ 0x28
 800432e:	e026      	b.n	800437e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004342:	d007      	beq.n	8004354 <UART_Receive_IT+0x74>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10a      	bne.n	8004362 <UART_Receive_IT+0x82>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e008      	b.n	8004374 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800436e:	b2da      	uxtb	r2, r3
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29b      	uxth	r3, r3
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4619      	mov	r1, r3
 800438c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800438e:	2b00      	cmp	r3, #0
 8004390:	d15d      	bne.n	800444e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68da      	ldr	r2, [r3, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0220 	bic.w	r2, r2, #32
 80043a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d135      	bne.n	8004444 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	613b      	str	r3, [r7, #16]
   return(result);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f023 0310 	bic.w	r3, r3, #16
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fe:	623a      	str	r2, [r7, #32]
 8004400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	69f9      	ldr	r1, [r7, #28]
 8004404:	6a3a      	ldr	r2, [r7, #32]
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	61bb      	str	r3, [r7, #24]
   return(result);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d10a      	bne.n	8004436 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fdd5 	bl	8003fec <HAL_UARTEx_RxEventCallback>
 8004442:	e002      	b.n	800444a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7fc f955 	bl	80006f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e002      	b.n	8004454 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3730      	adds	r7, #48	@ 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004496:	f023 030c 	bic.w	r3, r3, #12
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	430b      	orrs	r3, r1
 80044a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2c      	ldr	r2, [pc, #176]	@ (8004570 <UART_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d103      	bne.n	80044cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe f83e 	bl	8002544 <HAL_RCC_GetPCLK2Freq>
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	e002      	b.n	80044d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe f826 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009a      	lsls	r2, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <UART_SetConfig+0x118>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	0119      	lsls	r1, r3, #4
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009a      	lsls	r2, r3, #2
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	fbb2 f2f3 	udiv	r2, r2, r3
 8004508:	4b1a      	ldr	r3, [pc, #104]	@ (8004574 <UART_SetConfig+0x118>)
 800450a:	fba3 0302 	umull	r0, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2064      	movs	r0, #100	@ 0x64
 8004512:	fb00 f303 	mul.w	r3, r0, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	3332      	adds	r3, #50	@ 0x32
 800451c:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <UART_SetConfig+0x118>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004528:	4419      	add	r1, r3
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004540:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <UART_SetConfig+0x118>)
 8004542:	fba3 0302 	umull	r0, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	2064      	movs	r0, #100	@ 0x64
 800454a:	fb00 f303 	mul.w	r3, r0, r3
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	3332      	adds	r3, #50	@ 0x32
 8004554:	4a07      	ldr	r2, [pc, #28]	@ (8004574 <UART_SetConfig+0x118>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	f003 020f 	and.w	r2, r3, #15
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	440a      	add	r2, r1
 8004566:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40013800 	.word	0x40013800
 8004574:	51eb851f 	.word	0x51eb851f

08004578 <memset>:
 8004578:	4603      	mov	r3, r0
 800457a:	4402      	add	r2, r0
 800457c:	4293      	cmp	r3, r2
 800457e:	d100      	bne.n	8004582 <memset+0xa>
 8004580:	4770      	bx	lr
 8004582:	f803 1b01 	strb.w	r1, [r3], #1
 8004586:	e7f9      	b.n	800457c <memset+0x4>

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	2600      	movs	r6, #0
 800458c:	4d0c      	ldr	r5, [pc, #48]	@ (80045c0 <__libc_init_array+0x38>)
 800458e:	4c0d      	ldr	r4, [pc, #52]	@ (80045c4 <__libc_init_array+0x3c>)
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	f000 f81a 	bl	80045d0 <_init>
 800459c:	2600      	movs	r6, #0
 800459e:	4d0a      	ldr	r5, [pc, #40]	@ (80045c8 <__libc_init_array+0x40>)
 80045a0:	4c0a      	ldr	r4, [pc, #40]	@ (80045cc <__libc_init_array+0x44>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	08004664 	.word	0x08004664
 80045c4:	08004664 	.word	0x08004664
 80045c8:	08004664 	.word	0x08004664
 80045cc:	08004668 	.word	0x08004668

080045d0 <_init>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr

080045dc <_fini>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr
