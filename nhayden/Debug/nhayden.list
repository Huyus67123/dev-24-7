
nhayden.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e94  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004fa0  08004fa0  00005fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800505c  0800505c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005064  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  20000060  080050c4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  080050c4  000072e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf8  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b1  00000000  00000000  00015b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00018038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9d  00000000  00000000  00018f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e38  00000000  00000000  00019ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d3b  00000000  00000000  000318ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e15c  00000000  00000000  00042628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c4  00000000  00000000  000d07c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d4a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f88 	.word	0x08004f88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08004f88 	.word	0x08004f88

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fe30 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f818 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9a0 	bl	80004ac <MX_GPIO_Init>
  MX_TIM2_Init();
 800016c:	f000 f926 	bl	80003bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f972 	bl	8000458 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000174:	f000 f89e 	bl	80002b4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000178:	f000 f85e 	bl	8000238 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  changemod(1);
 800017c:	2001      	movs	r0, #1
 800017e:	f000 fa43 	bl	8000608 <changemod>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxByte, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	4902      	ldr	r1, [pc, #8]	@ (8000190 <main+0x34>)
 8000186:	4803      	ldr	r0, [pc, #12]	@ (8000194 <main+0x38>)
 8000188:	f003 fcbe 	bl	8003b08 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	bf00      	nop
 800018e:	e7fd      	b.n	800018c <main+0x30>
 8000190:	20000184 	.word	0x20000184
 8000194:	2000013c 	.word	0x2000013c

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	@ 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f004 fa5e 	bl	8004668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c8:	2302      	movs	r3, #2
 80001ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001cc:	2301      	movs	r3, #1
 80001ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d0:	2310      	movs	r3, #16
 80001d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fe2b 	bl	8001e38 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80001e8:	f000 fbba 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f898 	bl	800233c <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000212:	f000 fba5 	bl	8000960 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f002 fa19 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800022c:	f000 fb98 	bl	8000960 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	@ 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <MX_ADC1_Init+0x74>)
 800024a:	4a19      	ldr	r2, [pc, #100]	@ (80002b0 <MX_ADC1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000256:	2201      	movs	r2, #1
 8000258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	@ (80002ac <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000262:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000268:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <MX_ADC1_Init+0x74>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	480d      	ldr	r0, [pc, #52]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000276:	f000 fe07 	bl	8000e88 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 fb6e 	bl	8000960 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000284:	2301      	movs	r3, #1
 8000286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800028c:	2307      	movs	r3, #7
 800028e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	@ (80002ac <MX_ADC1_Init+0x74>)
 8000296:	f001 f88d 	bl	80013b4 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a0:	f000 fb5e 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	40012400 	.word	0x40012400

080002b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b092      	sub	sp, #72	@ 0x48
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
 80002d4:	615a      	str	r2, [r3, #20]
 80002d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2220      	movs	r2, #32
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f004 f9c2 	bl	8004668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002e4:	4b33      	ldr	r3, [pc, #204]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002e6:	4a34      	ldr	r2, [pc, #208]	@ (80003b8 <MX_TIM1_Init+0x104>)
 80002e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 80002ea:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002ec:	2250      	movs	r2, #80	@ 0x50
 80002ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f0:	4b30      	ldr	r3, [pc, #192]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80002f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fe:	4b2d      	ldr	r3, [pc, #180]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000304:	4b2b      	ldr	r3, [pc, #172]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800030a:	4b2a      	ldr	r3, [pc, #168]	@ (80003b4 <MX_TIM1_Init+0x100>)
 800030c:	2280      	movs	r2, #128	@ 0x80
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000310:	4828      	ldr	r0, [pc, #160]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000312:	f002 fb27 	bl	8002964 <HAL_TIM_PWM_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800031c:	f000 fb20 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000328:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800032c:	4619      	mov	r1, r3
 800032e:	4821      	ldr	r0, [pc, #132]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000330:	f003 fa4e 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800033a:	f000 fb11 	bl	8000960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	@ 0x60
 8000340:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 950;
 8000342:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034c:	2300      	movs	r3, #0
 800034e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000360:	2200      	movs	r2, #0
 8000362:	4619      	mov	r1, r3
 8000364:	4813      	ldr	r0, [pc, #76]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000366:	f002 fddf 	bl	8002f28 <HAL_TIM_PWM_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000370:	f000 faf6 	bl	8000960 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000388:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800038c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4807      	ldr	r0, [pc, #28]	@ (80003b4 <MX_TIM1_Init+0x100>)
 8000398:	f003 fa78 	bl	800388c <HAL_TIMEx_ConfigBreakDeadTime>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80003a2:	f000 fadd 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003a6:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <MX_TIM1_Init+0x100>)
 80003a8:	f000 fbb0 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 80003ac:	bf00      	nop
 80003ae:	3748      	adds	r7, #72	@ 0x48
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	40012c00 	.word	0x40012c00

080003bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	f107 0308 	add.w	r3, r7, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80003e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003e2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80003e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80003ee:	4b19      	ldr	r3, [pc, #100]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80003f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_TIM2_Init+0x98>)
 80003fe:	2280      	movs	r2, #128	@ 0x80
 8000400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000402:	4814      	ldr	r0, [pc, #80]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000404:	f002 f9de 	bl	80027c4 <HAL_TIM_Base_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800040e:	f000 faa7 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000416:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000418:	f107 0308 	add.w	r3, r7, #8
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <MX_TIM2_Init+0x98>)
 8000420:	f002 fe44 	bl	80030ac <HAL_TIM_ConfigClockSource>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800042a:	f000 fa99 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	4806      	ldr	r0, [pc, #24]	@ (8000454 <MX_TIM2_Init+0x98>)
 800043c:	f003 f9c8 	bl	80037d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000446:	f000 fa8b 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000f4 	.word	0x200000f4

08000458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800045e:	4a12      	ldr	r2, [pc, #72]	@ (80004a8 <MX_USART1_UART_Init+0x50>)
 8000460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000464:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_USART1_UART_Init+0x4c>)
 8000490:	f003 fa5f 	bl	8003952 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800049a:	f000 fa61 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	2000013c 	.word	0x2000013c
 80004a8:	40013800 	.word	0x40013800

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004c0:	4b31      	ldr	r3, [pc, #196]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a30      	ldr	r2, [pc, #192]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b25      	ldr	r3, [pc, #148]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a24      	ldr	r2, [pc, #144]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <MX_GPIO_Init+0xdc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	481f      	ldr	r0, [pc, #124]	@ (800058c <MX_GPIO_Init+0xe0>)
 800050e:	f001 fc31 	bl	8001d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000512:	2301      	movs	r3, #1
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000516:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_GPIO_Init+0xe4>)
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4819      	ldr	r0, [pc, #100]	@ (800058c <MX_GPIO_Init+0xe0>)
 8000526:	f001 faa1 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800052a:	2308      	movs	r3, #8
 800052c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2302      	movs	r3, #2
 8000538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4812      	ldr	r0, [pc, #72]	@ (800058c <MX_GPIO_Init+0xe0>)
 8000542:	f001 fa93 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Nhan3s_Pin */
  GPIO_InitStruct.Pin = Nhan3s_Pin;
 8000546:	2308      	movs	r3, #8
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800054a:	4b12      	ldr	r3, [pc, #72]	@ (8000594 <MX_GPIO_Init+0xe8>)
 800054c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800054e:	2302      	movs	r3, #2
 8000550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Nhan3s_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	4619      	mov	r1, r3
 8000558:	480f      	ldr	r0, [pc, #60]	@ (8000598 <MX_GPIO_Init+0xec>)
 800055a:	f001 fa87 	bl	8001a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	2006      	movs	r0, #6
 8000564:	f001 f999 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000568:	2006      	movs	r0, #6
 800056a:	f001 f9b2 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2009      	movs	r0, #9
 8000574:	f001 f991 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000578:	2009      	movs	r0, #9
 800057a:	f001 f9aa 	bl	80018d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800
 8000590:	10110000 	.word	0x10110000
 8000594:	10310000 	.word	0x10310000
 8000598:	40010c00 	.word	0x40010c00

0800059c <printf_uart>:

/* USER CODE BEGIN 4 */
void printf_uart(const char *mess) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)mess, strlen(mess), 500);
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fdd1 	bl	800014c <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <printf_uart+0x28>)
 80005b6:	f003 fa1c 	bl	80039f2 <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000013c 	.word	0x2000013c

080005c8 <changeARR>:

void changeARR(uint16_t ARR){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_AUTORELOAD(&htim2, ARR);
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <changeARR+0x38>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	88fa      	ldrh	r2, [r7, #6]
 80005d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	4a08      	ldr	r2, [pc, #32]	@ (8000600 <changeARR+0x38>)
 80005de:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim2);
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <changeARR+0x38>)
 80005e2:	f002 f93f 	bl	8002864 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Stop_IT(&htim1,TIM_CHANNEL_1);
 80005e6:	2100      	movs	r1, #0
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <changeARR+0x3c>)
 80005ea:	f002 fafb 	bl	8002be4 <HAL_TIM_PWM_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <changeARR+0x3c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000f4 	.word	0x200000f4
 8000604:	200000ac 	.word	0x200000ac

08000608 <changemod>:

void changemod(uint8_t mod){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000612:	482f      	ldr	r0, [pc, #188]	@ (80006d0 <changemod+0xc8>)
 8000614:	f002 f978 	bl	8002908 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000618:	482e      	ldr	r0, [pc, #184]	@ (80006d4 <changemod+0xcc>)
 800061a:	f002 f975 	bl	8002908 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800061e:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <changemod+0xc8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_ADC_Stop_IT(&hadc1);
 8000626:	482c      	ldr	r0, [pc, #176]	@ (80006d8 <changemod+0xd0>)
 8000628:	f000 fdbc 	bl	80011a4 <HAL_ADC_Stop_IT>
	switch(mod){
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3b01      	subs	r3, #1
 8000630:	2b04      	cmp	r3, #4
 8000632:	d848      	bhi.n	80006c6 <changemod+0xbe>
 8000634:	a201      	add	r2, pc, #4	@ (adr r2, 800063c <changemod+0x34>)
 8000636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800063a:	bf00      	nop
 800063c:	08000651 	.word	0x08000651
 8000640:	08000661 	.word	0x08000661
 8000644:	08000671 	.word	0x08000671
 8000648:	08000691 	.word	0x08000691
 800064c:	080006a1 	.word	0x080006a1
		case 1:
			changeARR(4999);
 8000650:	f241 3087 	movw	r0, #4999	@ 0x1387
 8000654:	f7ff ffb8 	bl	80005c8 <changeARR>
			printf_uart(" Mode 1\n");
 8000658:	4820      	ldr	r0, [pc, #128]	@ (80006dc <changemod+0xd4>)
 800065a:	f7ff ff9f 	bl	800059c <printf_uart>
			break;
 800065e:	e032      	b.n	80006c6 <changemod+0xbe>
		case 2:
			changeARR(9999);
 8000660:	f242 700f 	movw	r0, #9999	@ 0x270f
 8000664:	f7ff ffb0 	bl	80005c8 <changeARR>
			printf_uart(" Mode 2\n");
 8000668:	481d      	ldr	r0, [pc, #116]	@ (80006e0 <changemod+0xd8>)
 800066a:	f7ff ff97 	bl	800059c <printf_uart>
			break;
 800066e:	e02a      	b.n	80006c6 <changemod+0xbe>
		case 3:
			HAL_TIM_Base_Start_IT(&htim1);
 8000670:	4818      	ldr	r0, [pc, #96]	@ (80006d4 <changemod+0xcc>)
 8000672:	f002 f8f7 	bl	8002864 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(led_GPIO_Port,led_Pin,RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	481a      	ldr	r0, [pc, #104]	@ (80006e4 <changemod+0xdc>)
 800067c:	f001 fb7a 	bl	8001d74 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 8000680:	2100      	movs	r1, #0
 8000682:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <changemod+0xcc>)
 8000684:	f002 f9be 	bl	8002a04 <HAL_TIM_PWM_Start_IT>
			printf_uart(" Mode 3\n");
 8000688:	4817      	ldr	r0, [pc, #92]	@ (80006e8 <changemod+0xe0>)
 800068a:	f7ff ff87 	bl	800059c <printf_uart>
			break;
 800068e:	e01a      	b.n	80006c6 <changemod+0xbe>
		case 4:
			changeARR(2999);
 8000690:	f640 30b7 	movw	r0, #2999	@ 0xbb7
 8000694:	f7ff ff98 	bl	80005c8 <changeARR>
			printf_uart(" Mode 4\n");
 8000698:	4814      	ldr	r0, [pc, #80]	@ (80006ec <changemod+0xe4>)
 800069a:	f7ff ff7f 	bl	800059c <printf_uart>
			break;
 800069e:	e012      	b.n	80006c6 <changemod+0xbe>
		case 5:
			HAL_TIM_Base_Start_IT(&htim1);
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <changemod+0xcc>)
 80006a2:	f002 f8df 	bl	8002864 <HAL_TIM_Base_Start_IT>
			HAL_GPIO_WritePin(led_GPIO_Port,led_Pin,RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2108      	movs	r1, #8
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <changemod+0xdc>)
 80006ac:	f001 fb62 	bl	8001d74 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	4808      	ldr	r0, [pc, #32]	@ (80006d4 <changemod+0xcc>)
 80006b4:	f002 f9a6 	bl	8002a04 <HAL_TIM_PWM_Start_IT>
			printf_uart(" Mode 5\n");
 80006b8:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <changemod+0xe8>)
 80006ba:	f7ff ff6f 	bl	800059c <printf_uart>
			HAL_ADC_Start_IT(&hadc1);
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <changemod+0xd0>)
 80006c0:	f000 fcba 	bl	8001038 <HAL_ADC_Start_IT>
			break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000f4 	.word	0x200000f4
 80006d4:	200000ac 	.word	0x200000ac
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	08004fa0 	.word	0x08004fa0
 80006e0:	08004fac 	.word	0x08004fac
 80006e4:	40010800 	.word	0x40010800
 80006e8:	08004fb8 	.word	0x08004fb8
 80006ec:	08004fc4 	.word	0x08004fc4
 80006f0:	08004fd0 	.word	0x08004fd0

080006f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART1) {
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <HAL_UART_RxCpltCallback+0x3c>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d10f      	bne.n	8000726 <HAL_UART_RxCpltCallback+0x32>
		 mod=rxByte-'0';
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_UART_RxCpltCallback+0x40>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3b30      	subs	r3, #48	@ 0x30
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <HAL_UART_RxCpltCallback+0x44>)
 8000710:	701a      	strb	r2, [r3, #0]
		 changemod(mod);
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_UART_RxCpltCallback+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff76 	bl	8000608 <changemod>
		 HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxByte, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	4905      	ldr	r1, [pc, #20]	@ (8000734 <HAL_UART_RxCpltCallback+0x40>)
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <HAL_UART_RxCpltCallback+0x48>)
 8000722:	f003 f9f1 	bl	8003b08 <HAL_UART_Receive_IT>
	 }
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013800 	.word	0x40013800
 8000734:	20000184 	.word	0x20000184
 8000738:	20000187 	.word	0x20000187
 800073c:	2000013c 	.word	0x2000013c

08000740 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000750:	d103      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000752:	2108      	movs	r1, #8
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000756:	f001 fb25 	bl	8001da4 <HAL_GPIO_TogglePin>
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40010800 	.word	0x40010800

08000768 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d129      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
		if(mod == 3){
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d125      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
			if(flag==0){
 8000782:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d110      	bne.n	80007ac <HAL_TIM_PWM_PulseFinishedCallback+0x44>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, count);
 800078a:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
				if(count-- == 1) {
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	b291      	uxth	r1, r2
 800079c:	4a11      	ldr	r2, [pc, #68]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 800079e:	8011      	strh	r1, [r2, #0]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d114      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
					flag=1;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
					flag=0;
				}
			}
		}
	}
}
 80007aa:	e010      	b.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, count);
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
				if(count++ == 1000) {
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	b291      	uxth	r1, r2
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80007c0:	8011      	strh	r1, [r2, #0]
 80007c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007c6:	d102      	bne.n	80007ce <HAL_TIM_PWM_PulseFinishedCallback+0x66>
					flag=0;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	20000187 	.word	0x20000187
 80007e0:	20000185 	.word	0x20000185
 80007e4:	20000000 	.word	0x20000000
 80007e8:	200000ac 	.word	0x200000ac

080007ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==button_Pin){
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d12a      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x66>
		if(HAL_GetTick() - last_tick > 200){
 80007fc:	f000 fb3a 	bl	8000e74 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	4b2a      	ldr	r3, [pc, #168]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	2bc8      	cmp	r3, #200	@ 0xc8
 800080a:	d94b      	bls.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
			mod++;
 800080c:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000816:	701a      	strb	r2, [r3, #0]
			if(mod > 3 && mod < 5) mod = 5;
 8000818:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d906      	bls.n	800082e <HAL_GPIO_EXTI_Callback+0x42>
 8000820:	4b23      	ldr	r3, [pc, #140]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d802      	bhi.n	800082e <HAL_GPIO_EXTI_Callback+0x42>
 8000828:	4b21      	ldr	r3, [pc, #132]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800082a:	2205      	movs	r2, #5
 800082c:	701a      	strb	r2, [r3, #0]
			if(mod > 5) mod = 1;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b05      	cmp	r3, #5
 8000834:	d902      	bls.n	800083c <HAL_GPIO_EXTI_Callback+0x50>
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
			changemod(mod);
 800083c:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fee1 	bl	8000608 <changemod>
			last_tick = HAL_GetTick();
 8000846:	f000 fb15 	bl	8000e74 <HAL_GetTick>
 800084a:	4603      	mov	r3, r0
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 800084e:	6013      	str	r3, [r2, #0]
				changemod(mod);
			}
			last_tick = HAL_GetTick();
		}
	}
}
 8000850:	e028      	b.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
	else if(GPIO_Pin==Nhan3s_Pin){
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b08      	cmp	r3, #8
 8000856:	d125      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
		if(HAL_GetTick() - last_tick > 50){
 8000858:	f000 fb0c 	bl	8000e74 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	2b32      	cmp	r3, #50	@ 0x32
 8000866:	d91d      	bls.n	80008a4 <HAL_GPIO_EXTI_Callback+0xb8>
			if(flag_nhan==0) {
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d109      	bne.n	8000884 <HAL_GPIO_EXTI_Callback+0x98>
				changemod(4);
 8000870:	2004      	movs	r0, #4
 8000872:	f7ff fec9 	bl	8000608 <changemod>
				flag_nhan++;
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e00a      	b.n	800089a <HAL_GPIO_EXTI_Callback+0xae>
				flag_nhan=0;
 8000884:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
				printf_uart(" turn back ");
 800088a:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <HAL_GPIO_EXTI_Callback+0xcc>)
 800088c:	f7ff fe86 	bl	800059c <printf_uart>
				changemod(mod);
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff feb7 	bl	8000608 <changemod>
			last_tick = HAL_GetTick();
 800089a:	f000 faeb 	bl	8000e74 <HAL_GetTick>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a02      	ldr	r2, [pc, #8]	@ (80008ac <HAL_GPIO_EXTI_Callback+0xc0>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000188 	.word	0x20000188
 80008b0:	20000187 	.word	0x20000187
 80008b4:	20000186 	.word	0x20000186
 80008b8:	08004fdc 	.word	0x08004fdc

080008bc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <HAL_ADC_ConvCpltCallback+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d134      	bne.n	8000938 <HAL_ADC_ConvCpltCallback+0x7c>
        if(mod == 5){
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <HAL_ADC_ConvCpltCallback+0x88>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b05      	cmp	r3, #5
 80008d4:	d130      	bne.n	8000938 <HAL_ADC_ConvCpltCallback+0x7c>
        	if(HAL_GetTick() - last_get > 200){
 80008d6:	f000 facd 	bl	8000e74 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <HAL_ADC_ConvCpltCallback+0x8c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e4:	d928      	bls.n	8000938 <HAL_ADC_ConvCpltCallback+0x7c>
        		adc_value= HAL_ADC_GetValue(&hadc1);
 80008e6:	4819      	ldr	r0, [pc, #100]	@ (800094c <HAL_ADC_ConvCpltCallback+0x90>)
 80008e8:	f000 fc90 	bl	800120c <HAL_ADC_GetValue>
 80008ec:	4603      	mov	r3, r0
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <HAL_ADC_ConvCpltCallback+0x94>)
 80008f2:	801a      	strh	r2, [r3, #0]
        		uint16_t pwm_value = (adc_value * __HAL_TIM_GET_AUTORELOAD(&htim1))/4000;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <HAL_ADC_ConvCpltCallback+0x94>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <HAL_ADC_ConvCpltCallback+0x98>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000906:	fba2 2303 	umull	r2, r3, r2, r3
 800090a:	0a1b      	lsrs	r3, r3, #8
 800090c:	83fb      	strh	r3, [r7, #30]
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_value);
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_ADC_ConvCpltCallback+0x98>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	8bfa      	ldrh	r2, [r7, #30]
 8000914:	635a      	str	r2, [r3, #52]	@ 0x34
				char buffer[20];
				sprintf(buffer, "ADC: %d\r\n",  pwm_value);
 8000916:	8bfa      	ldrh	r2, [r7, #30]
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	490f      	ldr	r1, [pc, #60]	@ (800095c <HAL_ADC_ConvCpltCallback+0xa0>)
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fe82 	bl	8004628 <siprintf>
				printf_uart(buffer);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe37 	bl	800059c <printf_uart>
				last_get = HAL_GetTick();
 800092e:	f000 faa1 	bl	8000e74 <HAL_GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000936:	6013      	str	r3, [r2, #0]
        	}
        }
    }
}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40012400 	.word	0x40012400
 8000944:	20000187 	.word	0x20000187
 8000948:	2000018c 	.word	0x2000018c
 800094c:	2000007c 	.word	0x2000007c
 8000950:	20000190 	.word	0x20000190
 8000954:	200000ac 	.word	0x200000ac
 8000958:	10624dd3 	.word	0x10624dd3
 800095c:	08004fe8 	.word	0x08004fe8

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <Error_Handler+0x8>

0800096c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <HAL_MspInit+0x6c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <HAL_MspInit+0x6c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <HAL_MspInit+0x6c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <HAL_MspInit+0x6c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <HAL_MspInit+0x6c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_MspInit+0x6c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 ff77 	bl	800189a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 ff90 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_MspInit+0x70>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_MspInit+0x70>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010000 	.word	0x40010000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <HAL_ADC_MspInit+0x7c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d129      	bne.n	8000a54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a16      	ldr	r2, [pc, #88]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a34:	2303      	movs	r3, #3
 8000a36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <HAL_ADC_MspInit+0x84>)
 8000a40:	f001 f814 	bl	8001a6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2100      	movs	r1, #0
 8000a48:	2012      	movs	r0, #18
 8000a4a:	f000 ff26 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a4e:	2012      	movs	r0, #18
 8000a50:	f000 ff3f 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a54:	bf00      	nop
 8000a56:	3720      	adds	r7, #32
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40012400 	.word	0x40012400
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010800 	.word	0x40010800

08000a68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <HAL_TIM_PWM_MspInit+0x54>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d11b      	bne.n	8000ab2 <HAL_TIM_PWM_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x58>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x58>)
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_TIM_PWM_MspInit+0x58>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2019      	movs	r0, #25
 8000a98:	f000 feff 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a9c:	2019      	movs	r0, #25
 8000a9e:	f000 ff18 	bl	80018d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	201b      	movs	r0, #27
 8000aa8:	f000 fef7 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000aac:	201b      	movs	r0, #27
 8000aae:	f000 ff10 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad4:	d113      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_TIM_Base_MspInit+0x44>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_TIM_Base_MspInit+0x44>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_TIM_Base_MspInit+0x44>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	201c      	movs	r0, #28
 8000af4:	f000 fed1 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000af8:	201c      	movs	r0, #28
 8000afa:	f000 feea 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_TIM_MspPostInit+0x5c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d118      	bne.n	8000b5e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_TIM_MspPostInit+0x60>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_TIM_MspPostInit+0x60>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_TIM_MspPostInit+0x60>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <HAL_TIM_MspPostInit+0x64>)
 8000b5a:	f000 ff87 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b5e:	bf00      	nop
 8000b60:	3720      	adds	r7, #32
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40012c00 	.word	0x40012c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a20      	ldr	r2, [pc, #128]	@ (8000c10 <HAL_UART_MspInit+0x9c>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d139      	bne.n	8000c08 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <HAL_UART_MspInit+0xa0>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480f      	ldr	r0, [pc, #60]	@ (8000c18 <HAL_UART_MspInit+0xa4>)
 8000bda:	f000 ff47 	bl	8001a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <HAL_UART_MspInit+0xa4>)
 8000bf4:	f000 ff3a 	bl	8001a6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2025      	movs	r0, #37	@ 0x25
 8000bfe:	f000 fe4c 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c02:	2025      	movs	r0, #37	@ 0x25
 8000c04:	f000 fe65 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c08:	bf00      	nop
 8000c0a:	3720      	adds	r7, #32
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 f8f0 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000c78:	f001 f8c6 	bl	8001e08 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f001 f8a7 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Nhan3s_Pin);
 8000c92:	2008      	movs	r0, #8
 8000c94:	f001 f8a0 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	@ (8000cac <ADC1_2_IRQHandler+0x10>)
 8000ca2:	f000 fabf 	bl	8001224 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000007c 	.word	0x2000007c

08000cb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <TIM1_UP_IRQHandler+0x10>)
 8000cb6:	f002 f847 	bl	8002d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000ac 	.word	0x200000ac

08000cc4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <TIM1_CC_IRQHandler+0x10>)
 8000cca:	f002 f83d 	bl	8002d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000ac 	.word	0x200000ac

08000cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <TIM2_IRQHandler+0x10>)
 8000cde:	f002 f833 	bl	8002d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000f4 	.word	0x200000f4

08000cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <USART1_IRQHandler+0x10>)
 8000cf2:	f002 ff2f 	bl	8003b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000013c 	.word	0x2000013c

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f003 fca2 	bl	8004678 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20005000 	.word	0x20005000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	20000194 	.word	0x20000194
 8000d68:	200002e8 	.word	0x200002e8

08000d6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d78:	f7ff fff8 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d7c:	480b      	ldr	r0, [pc, #44]	@ (8000dac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d7e:	490c      	ldr	r1, [pc, #48]	@ (8000db0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a09      	ldr	r2, [pc, #36]	@ (8000db8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d94:	4c09      	ldr	r4, [pc, #36]	@ (8000dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f003 fc6f 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da6:	f7ff f9d9 	bl	800015c <main>
  bx lr
 8000daa:	4770      	bx	lr
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000db4:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8000db8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dbc:	200002e4 	.word	0x200002e4

08000dc0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <CAN1_RX1_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fd55 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdc4 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 fd6d 	bl	80018ee <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 fd35 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <HAL_IncTick+0x1c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a03      	ldr	r2, [pc, #12]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000198 	.word	0x20000198

08000e74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b02      	ldr	r3, [pc, #8]	@ (8000e84 <HAL_GetTick+0x10>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	20000198 	.word	0x20000198

08000e88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0be      	b.n	8001028 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fd8a 	bl	80009e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 fbc3 	bl	8001658 <ADC_ConversionStop_Disable>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8099 	bne.w	8001016 <HAL_ADC_Init+0x18e>
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 8095 	bne.w	8001016 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ef4:	f023 0302 	bic.w	r3, r3, #2
 8000ef8:	f043 0202 	orr.w	r2, r3, #2
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7b1b      	ldrb	r3, [r3, #12]
 8000f0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f20:	d003      	beq.n	8000f2a <HAL_ADC_Init+0xa2>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d102      	bne.n	8000f30 <HAL_ADC_Init+0xa8>
 8000f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2e:	e000      	b.n	8000f32 <HAL_ADC_Init+0xaa>
 8000f30:	2300      	movs	r3, #0
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	7d1b      	ldrb	r3, [r3, #20]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d119      	bne.n	8000f74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7b1b      	ldrb	r3, [r3, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d109      	bne.n	8000f5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	035a      	lsls	r2, r3, #13
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	e00b      	b.n	8000f74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f60:	f043 0220 	orr.w	r2, r3, #32
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_ADC_Init+0x1a8>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6812      	ldr	r2, [r2, #0]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fa4:	d003      	beq.n	8000fae <HAL_ADC_Init+0x126>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d104      	bne.n	8000fb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	051b      	lsls	r3, r3, #20
 8000fb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <HAL_ADC_Init+0x1ac>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10b      	bne.n	8000ff4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe6:	f023 0303 	bic.w	r3, r3, #3
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff2:	e018      	b.n	8001026 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff8:	f023 0312 	bic.w	r3, r3, #18
 8000ffc:	f043 0210 	orr.w	r2, r3, #16
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001014:	e007      	b.n	8001026 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101a:	f043 0210 	orr.w	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001026:	7dfb      	ldrb	r3, [r7, #23]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	ffe1f7fd 	.word	0xffe1f7fd
 8001034:	ff1f0efe 	.word	0xff1f0efe

08001038 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Start_IT+0x1a>
 800104e:	2302      	movs	r3, #2
 8001050:	e0a0      	b.n	8001194 <HAL_ADC_Start_IT+0x15c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 faa2 	bl	80015a4 <ADC_Enable>
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 808f 	bne.w	800118a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a45      	ldr	r2, [pc, #276]	@ (800119c <HAL_ADC_Start_IT+0x164>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d105      	bne.n	8001096 <HAL_ADC_Start_IT+0x5e>
 800108a:	4b45      	ldr	r3, [pc, #276]	@ (80011a0 <HAL_ADC_Start_IT+0x168>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d115      	bne.n	80010c2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d026      	beq.n	80010fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c0:	e01d      	b.n	80010fe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a33      	ldr	r2, [pc, #204]	@ (80011a0 <HAL_ADC_Start_IT+0x168>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d004      	beq.n	80010e2 <HAL_ADC_Start_IT+0xaa>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <HAL_ADC_Start_IT+0x164>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10d      	bne.n	80010fe <HAL_ADC_Start_IT+0xc6>
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <HAL_ADC_Start_IT+0x168>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110e:	f023 0206 	bic.w	r2, r3, #6
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001116:	e002      	b.n	800111e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0202 	mvn.w	r2, #2
 800112e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800114a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800114e:	d113      	bne.n	8001178 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001154:	4a11      	ldr	r2, [pc, #68]	@ (800119c <HAL_ADC_Start_IT+0x164>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d105      	bne.n	8001166 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800115a:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <HAL_ADC_Start_IT+0x168>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001162:	2b00      	cmp	r3, #0
 8001164:	d108      	bne.n	8001178 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	e00c      	b.n	8001192 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	e003      	b.n	8001192 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40012800 	.word	0x40012800
 80011a0:	40012400 	.word	0x40012400

080011a4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Stop_IT+0x1a>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e022      	b.n	8001204 <HAL_ADC_Stop_IT+0x60>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa46 	bl	8001658 <ADC_ConversionStop_Disable>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d111      	bne.n	80011fa <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0220 	bic.w	r2, r2, #32
 80011e4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	f043 0201 	orr.w	r2, r3, #1
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001202:	7bfb      	ldrb	r3, [r7, #15]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03e      	beq.n	80012c4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d039      	beq.n	80012c4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	d105      	bne.n	8001268 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001260:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001276:	d11d      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800127c:	2b00      	cmp	r3, #0
 800127e:	d119      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0220 	bic.w	r2, r2, #32
 800128e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff fb01 	bl	80008bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f06f 0212 	mvn.w	r2, #18
 80012c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d04d      	beq.n	800136a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d048      	beq.n	800136a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80012fa:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80012fe:	d012      	beq.n	8001326 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800130a:	2b00      	cmp	r3, #0
 800130c:	d125      	bne.n	800135a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001318:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800131c:	d11d      	bne.n	800135a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d119      	bne.n	800135a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001334:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800133a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f9bd 	bl	80016da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f06f 020c 	mvn.w	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00d      	beq.n	800139a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001382:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f809 	bl	80013a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f06f 0201 	mvn.w	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x20>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e0dc      	b.n	800158e <HAL_ADC_ConfigChannel+0x1da>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	d81c      	bhi.n	800141e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b05      	subs	r3, #5
 80013f6:	221f      	movs	r2, #31
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4019      	ands	r1, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b05      	subs	r3, #5
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	@ 0x34
 800141c:	e03c      	b.n	8001498 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b0c      	cmp	r3, #12
 8001424:	d81c      	bhi.n	8001460 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	3b23      	subs	r3, #35	@ 0x23
 8001438:	221f      	movs	r2, #31
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	4019      	ands	r1, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b23      	subs	r3, #35	@ 0x23
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	631a      	str	r2, [r3, #48]	@ 0x30
 800145e:	e01b      	b.n	8001498 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b41      	subs	r3, #65	@ 0x41
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	4019      	ands	r1, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b41      	subs	r3, #65	@ 0x41
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b09      	cmp	r3, #9
 800149e:	d91c      	bls.n	80014da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68d9      	ldr	r1, [r3, #12]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	3b1e      	subs	r3, #30
 80014b2:	2207      	movs	r2, #7
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4019      	ands	r1, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6898      	ldr	r0, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	3b1e      	subs	r3, #30
 80014cc:	fa00 f203 	lsl.w	r2, r0, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	e019      	b.n	800150e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6919      	ldr	r1, [r3, #16]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	2207      	movs	r2, #7
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	4019      	ands	r1, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6898      	ldr	r0, [r3, #8]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d003      	beq.n	800151e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800151a:	2b11      	cmp	r3, #17
 800151c:	d132      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1d      	ldr	r2, [pc, #116]	@ (8001598 <HAL_ADC_ConfigChannel+0x1e4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d125      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d126      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001544:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b10      	cmp	r3, #16
 800154c:	d11a      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <HAL_ADC_ConfigChannel+0x1e8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a13      	ldr	r2, [pc, #76]	@ (80015a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9a      	lsrs	r2, r3, #18
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001564:	e002      	b.n	800156c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x1b2>
 8001572:	e007      	b.n	8001584 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40012400 	.word	0x40012400
 800159c:	20000004 	.word	0x20000004
 80015a0:	431bde83 	.word	0x431bde83

080015a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d040      	beq.n	8001644 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f042 0201 	orr.w	r2, r2, #1
 80015d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <ADC_Enable+0xac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <ADC_Enable+0xb0>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015e0:	e002      	b.n	80015e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f9      	bne.n	80015e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015ee:	f7ff fc41 	bl	8000e74 <HAL_GetTick>
 80015f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015f4:	e01f      	b.n	8001636 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015f6:	f7ff fc3d 	bl	8000e74 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d918      	bls.n	8001636 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d011      	beq.n	8001636 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001616:	f043 0210 	orr.w	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e007      	b.n	8001646 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b01      	cmp	r3, #1
 8001642:	d1d8      	bne.n	80015f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000004 	.word	0x20000004
 8001654:	431bde83 	.word	0x431bde83

08001658 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d12e      	bne.n	80016d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001682:	f7ff fbf7 	bl	8000e74 <HAL_GetTick>
 8001686:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001688:	e01b      	b.n	80016c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800168a:	f7ff fbf3 	bl	8000e74 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d914      	bls.n	80016c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10d      	bne.n	80016c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	f043 0210 	orr.w	r2, r3, #16
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b6:	f043 0201 	orr.w	r2, r3, #1
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e007      	b.n	80016d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d0dc      	beq.n	800168a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4906      	ldr	r1, [pc, #24]	@ (8001784 <__NVIC_EnableIRQ+0x34>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	@ (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	@ (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	@ 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295
 8001864:	f7ff ff90 	bl	8001788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff2d 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff42 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff90 	bl	80017dc <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5f 	bl	8001788 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff35 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d008      	beq.n	8001930 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2204      	movs	r2, #4
 8001922:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e020      	b.n	8001972 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 020e 	bic.w	r2, r2, #14
 800193e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d005      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
 800199e:	e051      	b.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 020e 	bic.w	r2, r2, #14
 80019ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_DMA_Abort_IT+0xd4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d029      	beq.n	8001a1e <HAL_DMA_Abort_IT+0xa2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <HAL_DMA_Abort_IT+0xd8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x9e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a58 <HAL_DMA_Abort_IT+0xdc>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x98>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <HAL_DMA_Abort_IT+0xe0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x92>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001a60 <HAL_DMA_Abort_IT+0xe4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00a      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x8c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <HAL_DMA_Abort_IT+0xe8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_DMA_Abort_IT+0x86>
 80019fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a00:	e00e      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a06:	e00b      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a0c:	e008      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a12:	e005      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a18:	e002      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1a:	2310      	movs	r3, #16
 8001a1c:	e000      	b.n	8001a20 <HAL_DMA_Abort_IT+0xa4>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_DMA_Abort_IT+0xec>)
 8001a22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
    } 
  }
  return status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020008 	.word	0x40020008
 8001a54:	4002001c 	.word	0x4002001c
 8001a58:	40020030 	.word	0x40020030
 8001a5c:	40020044 	.word	0x40020044
 8001a60:	40020058 	.word	0x40020058
 8001a64:	4002006c 	.word	0x4002006c
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	@ 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e169      	b.n	8001d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8158 	bne.w	8001d4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a9a      	ldr	r2, [pc, #616]	@ (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d05e      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a98      	ldr	r2, [pc, #608]	@ (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d875      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aae:	4a98      	ldr	r2, [pc, #608]	@ (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d058      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a96      	ldr	r2, [pc, #600]	@ (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d86f      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aba:	4a96      	ldr	r2, [pc, #600]	@ (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d052      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a94      	ldr	r2, [pc, #592]	@ (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d869      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ac6:	4a94      	ldr	r2, [pc, #592]	@ (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04c      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001acc:	4a92      	ldr	r2, [pc, #584]	@ (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d863      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ad2:	4a92      	ldr	r2, [pc, #584]	@ (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d046      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a90      	ldr	r2, [pc, #576]	@ (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d85d      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d82a      	bhi.n	8001b38 <HAL_GPIO_Init+0xcc>
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d859      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8001aec <HAL_GPIO_Init+0x80>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b53 	.word	0x08001b53
 8001af8:	08001b95 	.word	0x08001b95
 8001afc:	08001b9b 	.word	0x08001b9b
 8001b00:	08001b9b 	.word	0x08001b9b
 8001b04:	08001b9b 	.word	0x08001b9b
 8001b08:	08001b9b 	.word	0x08001b9b
 8001b0c:	08001b9b 	.word	0x08001b9b
 8001b10:	08001b9b 	.word	0x08001b9b
 8001b14:	08001b9b 	.word	0x08001b9b
 8001b18:	08001b9b 	.word	0x08001b9b
 8001b1c:	08001b9b 	.word	0x08001b9b
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b9b 	.word	0x08001b9b
 8001b28:	08001b9b 	.word	0x08001b9b
 8001b2c:	08001b9b 	.word	0x08001b9b
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b5d 	.word	0x08001b5d
 8001b38:	4a79      	ldr	r2, [pc, #484]	@ (8001d20 <HAL_GPIO_Init+0x2b4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3e:	e02c      	b.n	8001b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e029      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e024      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	3308      	adds	r3, #8
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e01f      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e01a      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e013      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	611a      	str	r2, [r3, #16]
          break;
 8001b86:	e009      	b.n	8001b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	615a      	str	r2, [r3, #20]
          break;
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          break;
 8001b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ba0:	d801      	bhi.n	8001ba6 <HAL_GPIO_Init+0x13a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_Init+0x13e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	@ 0xff
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_GPIO_Init+0x14c>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x152>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	3b08      	subs	r3, #8
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80b1 	beq.w	8001d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bec:	4b4d      	ldr	r3, [pc, #308]	@ (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c04:	4a48      	ldr	r2, [pc, #288]	@ (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x1ec>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3f      	ldr	r2, [pc, #252]	@ (8001d30 <HAL_GPIO_Init+0x2c4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1e8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d34 <HAL_GPIO_Init+0x2c8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1e4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3d      	ldr	r2, [pc, #244]	@ (8001d38 <HAL_GPIO_Init+0x2cc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1e0>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	492f      	ldr	r1, [pc, #188]	@ (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	492c      	ldr	r1, [pc, #176]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4928      	ldr	r1, [pc, #160]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4922      	ldr	r1, [pc, #136]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	491e      	ldr	r1, [pc, #120]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4918      	ldr	r1, [pc, #96]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4914      	ldr	r1, [pc, #80]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d021      	beq.n	8001d40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	490e      	ldr	r1, [pc, #56]	@ (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e021      	b.n	8001d4e <HAL_GPIO_Init+0x2e2>
 8001d0a:	bf00      	nop
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10310000 	.word	0x10310000
 8001d14:	10220000 	.word	0x10220000
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	10120000 	.word	0x10120000
 8001d20:	10110000 	.word	0x10110000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40011400 	.word	0x40011400
 8001d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_GPIO_Init+0x304>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	4909      	ldr	r1, [pc, #36]	@ (8001d70 <HAL_GPIO_Init+0x304>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	3301      	adds	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f47f ae8e 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	372c      	adds	r7, #44	@ 0x2c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
 8001d80:	4613      	mov	r3, r2
 8001d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d84:	787b      	ldrb	r3, [r7, #1]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8a:	887a      	ldrh	r2, [r7, #2]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d90:	e003      	b.n	8001d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	611a      	str	r2, [r3, #16]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	43d9      	mvns	r1, r3
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	611a      	str	r2, [r3, #16]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	@ (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fcf8 	bl	80007ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001e18:	f000 f808 	bl	8001e2c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001e1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e22:	615a      	str	r2, [r3, #20]
  }
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40010400 	.word	0x40010400

08001e2c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e272      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8087 	beq.w	8001f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	4b92      	ldr	r3, [pc, #584]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00c      	beq.n	8001e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e64:	4b8f      	ldr	r3, [pc, #572]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d112      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
 8001e70:	4b8c      	ldr	r3, [pc, #560]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7c:	d10b      	bne.n	8001e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06c      	beq.n	8001f64 <HAL_RCC_OscConfig+0x12c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d168      	bne.n	8001f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e24c      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x76>
 8001ea0:	4b80      	ldr	r3, [pc, #512]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a7f      	ldr	r2, [pc, #508]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e02e      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7a      	ldr	r2, [pc, #488]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a77      	ldr	r2, [pc, #476]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xbc>
 8001eda:	4b72      	ldr	r3, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a71      	ldr	r2, [pc, #452]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xd4>
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6a      	ldr	r2, [pc, #424]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b68      	ldr	r3, [pc, #416]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a67      	ldr	r2, [pc, #412]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe ffae 	bl	8000e74 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ffaa 	bl	8000e74 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e200      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xe4>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff9a 	bl	8000e74 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f44:	f7fe ff96 	bl	8000e74 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1ec      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x10c>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7e:	4b49      	ldr	r3, [pc, #292]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
 8001f8a:	4b46      	ldr	r3, [pc, #280]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b43      	ldr	r3, [pc, #268]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1c0      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4939      	ldr	r1, [pc, #228]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b36      	ldr	r3, [pc, #216]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe ff4f 	bl	8000e74 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7fe ff4b 	bl	8000e74 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1a1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4927      	ldr	r1, [pc, #156]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b26      	ldr	r3, [pc, #152]	@ (80020a8 <HAL_RCC_OscConfig+0x270>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7fe ff2e 	bl	8000e74 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7fe ff2a 	bl	8000e74 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e180      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03a      	beq.n	80020bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe ff0e 	bl	8000e74 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe ff0a 	bl	8000e74 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e160      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0d      	ldr	r3, [pc, #52]	@ (80020a4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 face 	bl	800261c <RCC_Delay>
 8002080:	e01c      	b.n	80020bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_RCC_OscConfig+0x274>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7fe fef4 	bl	8000e74 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208e:	e00f      	b.n	80020b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7fe fef0 	bl	8000e74 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d908      	bls.n	80020b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e146      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	42420000 	.word	0x42420000
 80020ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b92      	ldr	r3, [pc, #584]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e9      	bne.n	8002090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a6 	beq.w	8002216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b8b      	ldr	r3, [pc, #556]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b88      	ldr	r3, [pc, #544]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a87      	ldr	r2, [pc, #540]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b85      	ldr	r3, [pc, #532]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b82      	ldr	r3, [pc, #520]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7e      	ldr	r2, [pc, #504]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7fe feb1 	bl	8000e74 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7fe fead 	bl	8000e74 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	@ 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e103      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b75      	ldr	r3, [pc, #468]	@ (8002300 <HAL_RCC_OscConfig+0x4c8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x312>
 800213c:	4b6f      	ldr	r3, [pc, #444]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6e      	ldr	r2, [pc, #440]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	e02d      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x334>
 8002152:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a69      	ldr	r2, [pc, #420]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b67      	ldr	r3, [pc, #412]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a66      	ldr	r2, [pc, #408]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x356>
 8002174:	4b61      	ldr	r3, [pc, #388]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a60      	ldr	r2, [pc, #384]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	4b5e      	ldr	r3, [pc, #376]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x36e>
 800218e:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a5a      	ldr	r2, [pc, #360]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fe61 	bl	8000e74 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fe5d 	bl	8000e74 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0b1      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b4b      	ldr	r3, [pc, #300]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x37e>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe fe4b 	bl	8000e74 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe fe47 	bl	8000e74 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e09b      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b3c      	ldr	r3, [pc, #240]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8087 	beq.w	800232e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002220:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d061      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d146      	bne.n	80022c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe fe1b 	bl	8000e74 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fe17 	bl	8000e74 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e06d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002268:	d108      	bne.n	800227c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226a:	4b24      	ldr	r3, [pc, #144]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4921      	ldr	r1, [pc, #132]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a19      	ldr	r1, [r3, #32]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	430b      	orrs	r3, r1
 800228e:	491b      	ldr	r1, [pc, #108]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fdeb 	bl	8000e74 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fde7 	bl	8000e74 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x46a>
 80022c0:	e035      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <HAL_RCC_OscConfig+0x4cc>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fdd4 	bl	8000e74 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fdd0 	bl	8000e74 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e026      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x498>
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d107      	bne.n	8002308 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e019      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
 8002304:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_OscConfig+0x500>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000

0800233c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d0      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b6a      	ldr	r3, [pc, #424]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b67      	ldr	r3, [pc, #412]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4965      	ldr	r1, [pc, #404]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d040      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e073      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b39      	ldr	r3, [pc, #228]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4936      	ldr	r1, [pc, #216]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7fe fd22 	bl	8000e74 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7fe fd1e 	bl	8000e74 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e053      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800245c:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4922      	ldr	r1, [pc, #136]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1cc>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fc80 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	08004ff4 	.word	0x08004ff4
 8002508:	20000004 	.word	0x20000004
 800250c:	20000008 	.word	0x20000008

08002510 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b04      	cmp	r3, #4
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x30>
 800253a:	2b08      	cmp	r3, #8
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x36>
 800253e:	e027      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	e027      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a17      	ldr	r2, [pc, #92]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0c5b      	lsrs	r3, r3, #17
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	4a11      	ldr	r2, [pc, #68]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256a:	5cd3      	ldrb	r3, [r2, r3]
 800256c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a0d      	ldr	r2, [pc, #52]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e004      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	693b      	ldr	r3, [r7, #16]
}
 8002598:	4618      	mov	r0, r3
 800259a:	371c      	adds	r7, #28
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	0800500c 	.word	0x0800500c
 80025b0:	0800501c 	.word	0x0800501c
 80025b4:	003d0900 	.word	0x003d0900

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b02      	ldr	r3, [pc, #8]	@ (80025c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d0:	f7ff fff2 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08005004 	.word	0x08005004

080025f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	@ (8002614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	0adb      	lsrs	r3, r3, #11
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	08005004 	.word	0x08005004

0800261c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <RCC_Delay+0x34>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <RCC_Delay+0x38>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	0a5b      	lsrs	r3, r3, #9
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002638:	bf00      	nop
  }
  while (Delay --);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	60fa      	str	r2, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <RCC_Delay+0x1c>
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	20000004 	.word	0x20000004
 8002654:	10624dd3 	.word	0x10624dd3

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d07d      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b4f      	ldr	r3, [pc, #316]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10d      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268e:	61d3      	str	r3, [r2, #28]
 8002690:	4b49      	ldr	r3, [pc, #292]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269c:	2301      	movs	r3, #1
 800269e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b46      	ldr	r3, [pc, #280]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d118      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ac:	4b43      	ldr	r3, [pc, #268]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a42      	ldr	r2, [pc, #264]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b8:	f7fe fbdc 	bl	8000e74 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	e008      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c0:	f7fe fbd8 	bl	8000e74 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	@ 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e06d      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026de:	4b36      	ldr	r3, [pc, #216]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d02e      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d027      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002704:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002706:	4b2e      	ldr	r3, [pc, #184]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270c:	4b2c      	ldr	r3, [pc, #176]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002712:	4a29      	ldr	r2, [pc, #164]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d014      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7fe fba7 	bl	8000e74 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fba3 	bl	8000e74 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e036      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4917      	ldr	r1, [pc, #92]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800275a:	4313      	orrs	r3, r2
 800275c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	4a13      	ldr	r2, [pc, #76]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800276e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	490b      	ldr	r1, [pc, #44]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279a:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4904      	ldr	r1, [pc, #16]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
 80027c0:	42420440 	.word	0x42420440

080027c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e041      	b.n	800285a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe f96a 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f000 fd34 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d001      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e03a      	b.n	80028f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a18      	ldr	r2, [pc, #96]	@ (80028fc <HAL_TIM_Base_Start_IT+0x98>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00e      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d009      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x58>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <HAL_TIM_Base_Start_IT+0xa0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d111      	bne.n	80028e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d010      	beq.n	80028f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028de:	e007      	b.n	80028f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a1a      	ldr	r2, [r3, #32]
 8002926:	f241 1311 	movw	r3, #4369	@ 0x1111
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10f      	bne.n	8002950 <HAL_TIM_Base_Stop_IT+0x48>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a1a      	ldr	r2, [r3, #32]
 8002936:	f240 4344 	movw	r3, #1092	@ 0x444
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_TIM_Base_Stop_IT+0x48>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe f86c 	bl	8000a68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fc64 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_TIM_PWM_Start_IT+0x28>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	e022      	b.n	8002a72 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d109      	bne.n	8002a46 <HAL_TIM_PWM_Start_IT+0x42>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e015      	b.n	8002a72 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d109      	bne.n	8002a60 <HAL_TIM_PWM_Start_IT+0x5c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e008      	b.n	8002a72 <HAL_TIM_PWM_Start_IT+0x6e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0a9      	b.n	8002bce <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start_IT+0x86>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a88:	e013      	b.n	8002ab2 <HAL_TIM_PWM_Start_IT+0xae>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_PWM_Start_IT+0x96>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a98:	e00b      	b.n	8002ab2 <HAL_TIM_PWM_Start_IT+0xae>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d104      	bne.n	8002aaa <HAL_TIM_PWM_Start_IT+0xa6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aa8:	e003      	b.n	8002ab2 <HAL_TIM_PWM_Start_IT+0xae>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d841      	bhi.n	8002b3c <HAL_TIM_PWM_Start_IT+0x138>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002b3d 	.word	0x08002b3d
 8002ac8:	08002b3d 	.word	0x08002b3d
 8002acc:	08002b3d 	.word	0x08002b3d
 8002ad0:	08002b07 	.word	0x08002b07
 8002ad4:	08002b3d 	.word	0x08002b3d
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002b3d 	.word	0x08002b3d
 8002ae0:	08002b19 	.word	0x08002b19
 8002ae4:	08002b3d 	.word	0x08002b3d
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002b3d 	.word	0x08002b3d
 8002af0:	08002b2b 	.word	0x08002b2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0202 	orr.w	r2, r2, #2
 8002b02:	60da      	str	r2, [r3, #12]
      break;
 8002b04:	e01d      	b.n	8002b42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0204 	orr.w	r2, r2, #4
 8002b14:	60da      	str	r2, [r3, #12]
      break;
 8002b16:	e014      	b.n	8002b42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	60da      	str	r2, [r3, #12]
      break;
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0210 	orr.w	r2, r2, #16
 8002b38:	60da      	str	r2, [r3, #12]
      break;
 8002b3a:	e002      	b.n	8002b42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d141      	bne.n	8002bcc <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	6839      	ldr	r1, [r7, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fe19 	bl	8003788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a18      	ldr	r2, [pc, #96]	@ (8002bd8 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00e      	beq.n	8002b98 <HAL_TIM_PWM_Start_IT+0x194>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b82:	d009      	beq.n	8002b98 <HAL_TIM_PWM_Start_IT+0x194>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a14      	ldr	r2, [pc, #80]	@ (8002bdc <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_PWM_Start_IT+0x194>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d010      	beq.n	8002bcc <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	e007      	b.n	8002bcc <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400
 8002be0:	40000800 	.word	0x40000800

08002be4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b0c      	cmp	r3, #12
 8002bf6:	d841      	bhi.n	8002c7c <HAL_TIM_PWM_Stop_IT+0x98>
 8002bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c35 	.word	0x08002c35
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c7d 	.word	0x08002c7d
 8002c10:	08002c47 	.word	0x08002c47
 8002c14:	08002c7d 	.word	0x08002c7d
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002c7d 	.word	0x08002c7d
 8002c20:	08002c59 	.word	0x08002c59
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c6b 	.word	0x08002c6b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0202 	bic.w	r2, r2, #2
 8002c42:	60da      	str	r2, [r3, #12]
      break;
 8002c44:	e01d      	b.n	8002c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	60da      	str	r2, [r3, #12]
      break;
 8002c56:	e014      	b.n	8002c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0208 	bic.w	r2, r2, #8
 8002c66:	60da      	str	r2, [r3, #12]
      break;
 8002c68:	e00b      	b.n	8002c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0210 	bic.w	r2, r2, #16
 8002c78:	60da      	str	r2, [r3, #12]
      break;
 8002c7a:	e002      	b.n	8002c82 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d157      	bne.n	8002d38 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6839      	ldr	r1, [r7, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fd79 	bl	8003788 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d44 <HAL_TIM_PWM_Stop_IT+0x160>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d117      	bne.n	8002cd0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <HAL_TIM_PWM_Stop_IT+0xec>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_PWM_Stop_IT+0xec>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10f      	bne.n	8002d00 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_PWM_Stop_IT+0x12c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d0e:	e013      	b.n	8002d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_PWM_Stop_IT+0x13c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d1e:	e00b      	b.n	8002d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d104      	bne.n	8002d30 <HAL_TIM_PWM_Stop_IT+0x14c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_PWM_Stop_IT+0x154>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40012c00 	.word	0x40012c00

08002d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d020      	beq.n	8002dac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0202 	mvn.w	r2, #2
 8002d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa5a 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fa4d 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fce1 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d020      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0204 	mvn.w	r2, #4
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa34 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa27 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fd fcbb 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d020      	beq.n	8002e44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0208 	mvn.w	r2, #8
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa0e 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa01 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fd fc95 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d020      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0210 	mvn.w	r2, #16
 8002e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2208      	movs	r2, #8
 8002e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9e8 	bl	800324c <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9db 	bl	800323a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7fd fc6f 	bl	8000768 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0201 	mvn.w	r2, #1
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fd fc46 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fd34 	bl	8003940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00c      	beq.n	8002efc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9b1 	bl	800325e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00c      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0220 	mvn.w	r2, #32
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fd07 	bl	800392e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e0ae      	b.n	80030a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	f200 809f 	bhi.w	8003094 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f56:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08003095 	.word	0x08003095
 8002f64:	08003095 	.word	0x08003095
 8002f68:	08003095 	.word	0x08003095
 8002f6c:	08002fd1 	.word	0x08002fd1
 8002f70:	08003095 	.word	0x08003095
 8002f74:	08003095 	.word	0x08003095
 8002f78:	08003095 	.word	0x08003095
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	08003095 	.word	0x08003095
 8002f84:	08003095 	.word	0x08003095
 8002f88:	08003095 	.word	0x08003095
 8002f8c:	08003053 	.word	0x08003053
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f9d8 	bl	800334c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699a      	ldr	r2, [r3, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0208 	orr.w	r2, r2, #8
 8002faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6999      	ldr	r1, [r3, #24]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	619a      	str	r2, [r3, #24]
      break;
 8002fce:	e064      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fa1e 	bl	8003418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6999      	ldr	r1, [r3, #24]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	619a      	str	r2, [r3, #24]
      break;
 8003010:	e043      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fa67 	bl	80034ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0208 	orr.w	r2, r2, #8
 800302c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0204 	bic.w	r2, r2, #4
 800303c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
      break;
 8003050:	e023      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68b9      	ldr	r1, [r7, #8]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fab1 	bl	80035c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69d9      	ldr	r1, [r3, #28]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	021a      	lsls	r2, r3, #8
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	61da      	str	r2, [r3, #28]
      break;
 8003092:	e002      	b.n	800309a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
      break;
 8003098:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x1c>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0b4      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x186>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003100:	d03e      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0xd4>
 8003102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003106:	f200 8087 	bhi.w	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 800310a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310e:	f000 8086 	beq.w	800321e <HAL_TIM_ConfigClockSource+0x172>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003116:	d87f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b70      	cmp	r3, #112	@ 0x70
 800311a:	d01a      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xa6>
 800311c:	2b70      	cmp	r3, #112	@ 0x70
 800311e:	d87b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b60      	cmp	r3, #96	@ 0x60
 8003122:	d050      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003124:	2b60      	cmp	r3, #96	@ 0x60
 8003126:	d877      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b50      	cmp	r3, #80	@ 0x50
 800312a:	d03c      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xfa>
 800312c:	2b50      	cmp	r3, #80	@ 0x50
 800312e:	d873      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b40      	cmp	r3, #64	@ 0x40
 8003132:	d058      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d86f      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b30      	cmp	r3, #48	@ 0x30
 800313a:	d064      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800313c:	2b30      	cmp	r3, #48	@ 0x30
 800313e:	d86b      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b20      	cmp	r3, #32
 8003142:	d060      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b20      	cmp	r3, #32
 8003146:	d867      	bhi.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d05c      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d05a      	beq.n	8003206 <HAL_TIM_ConfigClockSource+0x15a>
 8003150:	e062      	b.n	8003218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003162:	f000 faf2 	bl	800374a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	609a      	str	r2, [r3, #8]
      break;
 800317e:	e04f      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003190:	f000 fadb 	bl	800374a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031a2:	609a      	str	r2, [r3, #8]
      break;
 80031a4:	e03c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 fa52 	bl	800365c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2150      	movs	r1, #80	@ 0x50
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 faa9 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031c4:	e02c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 fa70 	bl	80036b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2160      	movs	r1, #96	@ 0x60
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fa99 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 80031e4:	e01c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f2:	461a      	mov	r2, r3
 80031f4:	f000 fa32 	bl	800365c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2140      	movs	r1, #64	@ 0x40
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fa89 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003204:	e00c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 fa80 	bl	8003716 <TIM_ITRx_SetConfig>
      break;
 8003216:	e003      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
      break;
 800321c:	e000      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800321e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2f      	ldr	r2, [pc, #188]	@ (8003340 <TIM_Base_SetConfig+0xd0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00b      	beq.n	80032a0 <TIM_Base_SetConfig+0x30>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328e:	d007      	beq.n	80032a0 <TIM_Base_SetConfig+0x30>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a2c      	ldr	r2, [pc, #176]	@ (8003344 <TIM_Base_SetConfig+0xd4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d003      	beq.n	80032a0 <TIM_Base_SetConfig+0x30>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <TIM_Base_SetConfig+0xd8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d108      	bne.n	80032b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a22      	ldr	r2, [pc, #136]	@ (8003340 <TIM_Base_SetConfig+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <TIM_Base_SetConfig+0xd4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003348 <TIM_Base_SetConfig+0xd8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0d      	ldr	r2, [pc, #52]	@ (8003340 <TIM_Base_SetConfig+0xd0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f023 0201 	bic.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]
  }
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800

0800334c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 0201 	bic.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f023 0303 	bic.w	r3, r3, #3
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 0302 	bic.w	r3, r3, #2
 8003394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <TIM_OC1_SetConfig+0xc8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10c      	bne.n	80033c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0308 	bic.w	r3, r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <TIM_OC1_SetConfig+0xc8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d111      	bne.n	80033ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	621a      	str	r2, [r3, #32]
}
 8003408:	bf00      	nop
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00

08003418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0320 	bic.w	r3, r3, #32
 8003462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <TIM_OC2_SetConfig+0xd0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d10d      	bne.n	8003494 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a14      	ldr	r2, [pc, #80]	@ (80034e8 <TIM_OC2_SetConfig+0xd0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d113      	bne.n	80034c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00

080034ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	021b      	lsls	r3, r3, #8
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <TIM_OC3_SetConfig+0xd0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10d      	bne.n	8003566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <TIM_OC3_SetConfig+0xd0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00

080035c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800360a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	031b      	lsls	r3, r3, #12
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0f      	ldr	r2, [pc, #60]	@ (8003658 <TIM_OC4_SetConfig+0x98>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d109      	bne.n	8003634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	40012c00 	.word	0x40012c00

0800365c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f023 0201 	bic.w	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 030a 	bic.w	r3, r3, #10
 8003698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	f023 0210 	bic.w	r2, r3, #16
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	031b      	lsls	r3, r3, #12
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	621a      	str	r2, [r3, #32]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	f043 0307 	orr.w	r3, r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374a:	b480      	push	{r7}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	021a      	lsls	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	609a      	str	r2, [r3, #8]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2201      	movs	r2, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	401a      	ands	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 031f 	and.w	r3, r3, #31
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e046      	b.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a16      	ldr	r2, [pc, #88]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003834:	d009      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a12      	ldr	r2, [pc, #72]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a10      	ldr	r2, [pc, #64]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10c      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800

0800388c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e03d      	b.n	8003924 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e042      	b.n	80039ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd f8fb 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2224      	movs	r2, #36	@ 0x24
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fdb8 	bl	800450c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b08a      	sub	sp, #40	@ 0x28
 80039f6:	af02      	add	r7, sp, #8
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d175      	bne.n	8003afe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_UART_Transmit+0x2c>
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06e      	b.n	8003b00 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2221      	movs	r2, #33	@ 0x21
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a30:	f7fd fa20 	bl	8000e74 <HAL_GetTick>
 8003a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4a:	d108      	bne.n	8003a5e <HAL_UART_Transmit+0x6c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e003      	b.n	8003a66 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a66:	e02e      	b.n	8003ac6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2180      	movs	r1, #128	@ 0x80
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fb1d 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e03a      	b.n	8003b00 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e007      	b.n	8003ab8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1cb      	bne.n	8003a68 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2140      	movs	r1, #64	@ 0x40
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fae9 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d112      	bne.n	8003b48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_UART_Receive_IT+0x26>
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e00b      	b.n	8003b4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fb10 	bl	8004164 <UART_Start_Receive_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	e000      	b.n	8003b4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b0ba      	sub	sp, #232	@ 0xe8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10f      	bne.n	8003bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_UART_IRQHandler+0x66>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fbec 	bl	8004390 <UART_Receive_IT>
      return;
 8003bb8:	e25b      	b.n	8004072 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80de 	beq.w	8003d80 <HAL_UART_IRQHandler+0x22c>
 8003bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d106      	bne.n	8003bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80d1 	beq.w	8003d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xae>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <HAL_UART_IRQHandler+0xd2>
 8003c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_UART_IRQHandler+0xf6>
 8003c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c42:	f043 0204 	orr.w	r2, r3, #4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d011      	beq.n	8003c7a <HAL_UART_IRQHandler+0x126>
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f043 0208 	orr.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 81f2 	beq.w	8004068 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x14e>
 8003c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fb77 	bl	8004390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf14      	ite	ne
 8003cb0:	2301      	movne	r3, #1
 8003cb2:	2300      	moveq	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_UART_IRQHandler+0x17a>
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d04f      	beq.n	8003d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa81 	bl	80041d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d041      	beq.n	8003d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3314      	adds	r3, #20
 8003ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cf0:	e853 3f00 	ldrex	r3, [r3]
 8003cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1d9      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f34 <HAL_UART_IRQHandler+0x3e0>)
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fe1a 	bl	800197c <HAL_DMA_Abort_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	e00e      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f993 	bl	800408a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e00a      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f98f 	bl	800408a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	e006      	b.n	8003d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f98b 	bl	800408a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d7a:	e175      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	bf00      	nop
    return;
 8003d7e:	e173      	b.n	8004068 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f040 814f 	bne.w	8004028 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8148 	beq.w	8004028 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8141 	beq.w	8004028 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80b6 	beq.w	8003f38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8145 	beq.w	800406c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dea:	429a      	cmp	r2, r3
 8003dec:	f080 813e 	bcs.w	800406c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003df6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	f000 8088 	beq.w	8003f14 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1d9      	bne.n	8003e04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e1      	bne.n	8003e50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3314      	adds	r3, #20
 8003e92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003eb0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003eb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e3      	bne.n	8003e8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ee4:	f023 0310 	bic.w	r3, r3, #16
 8003ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ef6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ef8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e3      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fd fcf9 	bl	8001906 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8b6 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f30:	e09c      	b.n	800406c <HAL_UART_IRQHandler+0x518>
 8003f32:	bf00      	nop
 8003f34:	0800429b 	.word	0x0800429b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 808e 	beq.w	8004070 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8089 	beq.w	8004070 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f82:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3314      	adds	r3, #20
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e3      	bne.n	8003f96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004000:	61fa      	str	r2, [r7, #28]
 8004002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69b9      	ldr	r1, [r7, #24]
 8004006:	69fa      	ldr	r2, [r7, #28]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	617b      	str	r3, [r7, #20]
   return(result);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e3      	bne.n	8003fdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800401a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f83b 	bl	800409c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004026:	e023      	b.n	8004070 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800402c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <HAL_UART_IRQHandler+0x4f4>
 8004034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f93e 	bl	80042c2 <UART_Transmit_IT>
    return;
 8004046:	e014      	b.n	8004072 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00e      	beq.n	8004072 <HAL_UART_IRQHandler+0x51e>
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f97d 	bl	8004360 <UART_EndTransmit_IT>
    return;
 8004066:	e004      	b.n	8004072 <HAL_UART_IRQHandler+0x51e>
    return;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_UART_IRQHandler+0x51e>
      return;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_UART_IRQHandler+0x51e>
      return;
 8004070:	bf00      	nop
  }
}
 8004072:	37e8      	adds	r7, #232	@ 0xe8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c2:	e03b      	b.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d037      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040cc:	f7fc fed2 	bl	8000e74 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e03a      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d023      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d020      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b40      	cmp	r3, #64	@ 0x40
 80040fe:	d01d      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b08      	cmp	r3, #8
 800410c:	d116      	bne.n	800413c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f856 	bl	80041d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2208      	movs	r2, #8
 800412e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e00f      	b.n	800415c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	429a      	cmp	r2, r3
 8004158:	d0b4      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2222      	movs	r2, #34	@ 0x22
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0220 	orr.w	r2, r2, #32
 80041c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b095      	sub	sp, #84	@ 0x54
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004204:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e5      	bne.n	80041de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3314      	adds	r3, #20
 8004218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	61fb      	str	r3, [r7, #28]
   return(result);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	64bb      	str	r3, [r7, #72]	@ 0x48
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	2b01      	cmp	r3, #1
 800424c:	d119      	bne.n	8004282 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	60bb      	str	r3, [r7, #8]
   return(result);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800426e:	61ba      	str	r2, [r7, #24]
 8004270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004290:	bf00      	nop
 8004292:	3754      	adds	r7, #84	@ 0x54
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7ff fee8 	bl	800408a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b21      	cmp	r3, #33	@ 0x21
 80042d4:	d13e      	bne.n	8004354 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042de:	d114      	bne.n	800430a <UART_Transmit_IT+0x48>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d110      	bne.n	800430a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]
 8004308:	e008      	b.n	800431c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	1c59      	adds	r1, r3, #1
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6211      	str	r1, [r2, #32]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10f      	bne.n	8004350 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800433e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800434e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004376:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fe79 	bl	8004078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	@ 0x30
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b22      	cmp	r3, #34	@ 0x22
 80043a2:	f040 80ae 	bne.w	8004502 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d117      	bne.n	80043e0 <UART_Receive_IT+0x50>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d113      	bne.n	80043e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80043de:	e026      	b.n	800442e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043f2:	d007      	beq.n	8004404 <UART_Receive_IT+0x74>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <UART_Receive_IT+0x82>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e008      	b.n	8004424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800441e:	b2da      	uxtb	r2, r3
 8004420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800443e:	2b00      	cmp	r3, #0
 8004440:	d15d      	bne.n	80044fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0220 	bic.w	r2, r2, #32
 8004450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d135      	bne.n	80044f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	613b      	str	r3, [r7, #16]
   return(result);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f023 0310 	bic.w	r3, r3, #16
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ae:	623a      	str	r2, [r7, #32]
 80044b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b2:	69f9      	ldr	r1, [r7, #28]
 80044b4:	6a3a      	ldr	r2, [r7, #32]
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1e5      	bne.n	800448e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d10a      	bne.n	80044e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fdd5 	bl	800409c <HAL_UARTEx_RxEventCallback>
 80044f2:	e002      	b.n	80044fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc f8fd 	bl	80006f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e002      	b.n	8004504 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3730      	adds	r7, #48	@ 0x30
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004546:	f023 030c 	bic.w	r3, r3, #12
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	430b      	orrs	r3, r1
 8004552:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2c      	ldr	r2, [pc, #176]	@ (8004620 <UART_SetConfig+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7fe f83e 	bl	80025f4 <HAL_RCC_GetPCLK2Freq>
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	e002      	b.n	8004582 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7fe f826 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8004580:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009a      	lsls	r2, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	4a22      	ldr	r2, [pc, #136]	@ (8004624 <UART_SetConfig+0x118>)
 800459a:	fba2 2303 	umull	r2, r3, r2, r3
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	0119      	lsls	r1, r3, #4
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009a      	lsls	r2, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <UART_SetConfig+0x118>)
 80045ba:	fba3 0302 	umull	r0, r3, r3, r2
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2064      	movs	r0, #100	@ 0x64
 80045c2:	fb00 f303 	mul.w	r3, r0, r3
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	3332      	adds	r3, #50	@ 0x32
 80045cc:	4a15      	ldr	r2, [pc, #84]	@ (8004624 <UART_SetConfig+0x118>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d8:	4419      	add	r1, r3
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80045f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <UART_SetConfig+0x118>)
 80045f2:	fba3 0302 	umull	r0, r3, r3, r2
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2064      	movs	r0, #100	@ 0x64
 80045fa:	fb00 f303 	mul.w	r3, r0, r3
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	3332      	adds	r3, #50	@ 0x32
 8004604:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <UART_SetConfig+0x118>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	f003 020f 	and.w	r2, r3, #15
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	440a      	add	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40013800 	.word	0x40013800
 8004624:	51eb851f 	.word	0x51eb851f

08004628 <siprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800462e:	b500      	push	{lr}
 8004630:	b09c      	sub	sp, #112	@ 0x70
 8004632:	ab1d      	add	r3, sp, #116	@ 0x74
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	9107      	str	r1, [sp, #28]
 800463a:	9104      	str	r1, [sp, #16]
 800463c:	4808      	ldr	r0, [pc, #32]	@ (8004660 <siprintf+0x38>)
 800463e:	4909      	ldr	r1, [pc, #36]	@ (8004664 <siprintf+0x3c>)
 8004640:	f853 2b04 	ldr.w	r2, [r3], #4
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	a902      	add	r1, sp, #8
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	f000 f992 	bl	8004974 <_svfiprintf_r>
 8004650:	2200      	movs	r2, #0
 8004652:	9b02      	ldr	r3, [sp, #8]
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	b01c      	add	sp, #112	@ 0x70
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	20000010 	.word	0x20000010
 8004664:	ffff0208 	.word	0xffff0208

08004668 <memset>:
 8004668:	4603      	mov	r3, r0
 800466a:	4402      	add	r2, r0
 800466c:	4293      	cmp	r3, r2
 800466e:	d100      	bne.n	8004672 <memset+0xa>
 8004670:	4770      	bx	lr
 8004672:	f803 1b01 	strb.w	r1, [r3], #1
 8004676:	e7f9      	b.n	800466c <memset+0x4>

08004678 <__errno>:
 8004678:	4b01      	ldr	r3, [pc, #4]	@ (8004680 <__errno+0x8>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000010 	.word	0x20000010

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	2600      	movs	r6, #0
 8004688:	4d0c      	ldr	r5, [pc, #48]	@ (80046bc <__libc_init_array+0x38>)
 800468a:	4c0d      	ldr	r4, [pc, #52]	@ (80046c0 <__libc_init_array+0x3c>)
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	f000 fc78 	bl	8004f88 <_init>
 8004698:	2600      	movs	r6, #0
 800469a:	4d0a      	ldr	r5, [pc, #40]	@ (80046c4 <__libc_init_array+0x40>)
 800469c:	4c0a      	ldr	r4, [pc, #40]	@ (80046c8 <__libc_init_array+0x44>)
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	4798      	blx	r3
 80046ae:	3601      	adds	r6, #1
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	4798      	blx	r3
 80046b8:	3601      	adds	r6, #1
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	0800505c 	.word	0x0800505c
 80046c0:	0800505c 	.word	0x0800505c
 80046c4:	0800505c 	.word	0x0800505c
 80046c8:	08005060 	.word	0x08005060

080046cc <__retarget_lock_acquire_recursive>:
 80046cc:	4770      	bx	lr

080046ce <__retarget_lock_release_recursive>:
 80046ce:	4770      	bx	lr

080046d0 <_free_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4605      	mov	r5, r0
 80046d4:	2900      	cmp	r1, #0
 80046d6:	d040      	beq.n	800475a <_free_r+0x8a>
 80046d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046dc:	1f0c      	subs	r4, r1, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bfb8      	it	lt
 80046e2:	18e4      	addlt	r4, r4, r3
 80046e4:	f000 f8de 	bl	80048a4 <__malloc_lock>
 80046e8:	4a1c      	ldr	r2, [pc, #112]	@ (800475c <_free_r+0x8c>)
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	b933      	cbnz	r3, 80046fc <_free_r+0x2c>
 80046ee:	6063      	str	r3, [r4, #4]
 80046f0:	6014      	str	r4, [r2, #0]
 80046f2:	4628      	mov	r0, r5
 80046f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046f8:	f000 b8da 	b.w	80048b0 <__malloc_unlock>
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	d908      	bls.n	8004712 <_free_r+0x42>
 8004700:	6820      	ldr	r0, [r4, #0]
 8004702:	1821      	adds	r1, r4, r0
 8004704:	428b      	cmp	r3, r1
 8004706:	bf01      	itttt	eq
 8004708:	6819      	ldreq	r1, [r3, #0]
 800470a:	685b      	ldreq	r3, [r3, #4]
 800470c:	1809      	addeq	r1, r1, r0
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	e7ed      	b.n	80046ee <_free_r+0x1e>
 8004712:	461a      	mov	r2, r3
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	b10b      	cbz	r3, 800471c <_free_r+0x4c>
 8004718:	42a3      	cmp	r3, r4
 800471a:	d9fa      	bls.n	8004712 <_free_r+0x42>
 800471c:	6811      	ldr	r1, [r2, #0]
 800471e:	1850      	adds	r0, r2, r1
 8004720:	42a0      	cmp	r0, r4
 8004722:	d10b      	bne.n	800473c <_free_r+0x6c>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	4401      	add	r1, r0
 8004728:	1850      	adds	r0, r2, r1
 800472a:	4283      	cmp	r3, r0
 800472c:	6011      	str	r1, [r2, #0]
 800472e:	d1e0      	bne.n	80046f2 <_free_r+0x22>
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4408      	add	r0, r1
 8004736:	6010      	str	r0, [r2, #0]
 8004738:	6053      	str	r3, [r2, #4]
 800473a:	e7da      	b.n	80046f2 <_free_r+0x22>
 800473c:	d902      	bls.n	8004744 <_free_r+0x74>
 800473e:	230c      	movs	r3, #12
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	e7d6      	b.n	80046f2 <_free_r+0x22>
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	1821      	adds	r1, r4, r0
 8004748:	428b      	cmp	r3, r1
 800474a:	bf01      	itttt	eq
 800474c:	6819      	ldreq	r1, [r3, #0]
 800474e:	685b      	ldreq	r3, [r3, #4]
 8004750:	1809      	addeq	r1, r1, r0
 8004752:	6021      	streq	r1, [r4, #0]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	6054      	str	r4, [r2, #4]
 8004758:	e7cb      	b.n	80046f2 <_free_r+0x22>
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	200002e0 	.word	0x200002e0

08004760 <sbrk_aligned>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	4e0f      	ldr	r6, [pc, #60]	@ (80047a0 <sbrk_aligned+0x40>)
 8004764:	460c      	mov	r4, r1
 8004766:	6831      	ldr	r1, [r6, #0]
 8004768:	4605      	mov	r5, r0
 800476a:	b911      	cbnz	r1, 8004772 <sbrk_aligned+0x12>
 800476c:	f000 fbaa 	bl	8004ec4 <_sbrk_r>
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f000 fba5 	bl	8004ec4 <_sbrk_r>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d103      	bne.n	8004786 <sbrk_aligned+0x26>
 800477e:	f04f 34ff 	mov.w	r4, #4294967295
 8004782:	4620      	mov	r0, r4
 8004784:	bd70      	pop	{r4, r5, r6, pc}
 8004786:	1cc4      	adds	r4, r0, #3
 8004788:	f024 0403 	bic.w	r4, r4, #3
 800478c:	42a0      	cmp	r0, r4
 800478e:	d0f8      	beq.n	8004782 <sbrk_aligned+0x22>
 8004790:	1a21      	subs	r1, r4, r0
 8004792:	4628      	mov	r0, r5
 8004794:	f000 fb96 	bl	8004ec4 <_sbrk_r>
 8004798:	3001      	adds	r0, #1
 800479a:	d1f2      	bne.n	8004782 <sbrk_aligned+0x22>
 800479c:	e7ef      	b.n	800477e <sbrk_aligned+0x1e>
 800479e:	bf00      	nop
 80047a0:	200002dc 	.word	0x200002dc

080047a4 <_malloc_r>:
 80047a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047a8:	1ccd      	adds	r5, r1, #3
 80047aa:	f025 0503 	bic.w	r5, r5, #3
 80047ae:	3508      	adds	r5, #8
 80047b0:	2d0c      	cmp	r5, #12
 80047b2:	bf38      	it	cc
 80047b4:	250c      	movcc	r5, #12
 80047b6:	2d00      	cmp	r5, #0
 80047b8:	4606      	mov	r6, r0
 80047ba:	db01      	blt.n	80047c0 <_malloc_r+0x1c>
 80047bc:	42a9      	cmp	r1, r5
 80047be:	d904      	bls.n	80047ca <_malloc_r+0x26>
 80047c0:	230c      	movs	r3, #12
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	2000      	movs	r0, #0
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a0 <_malloc_r+0xfc>
 80047ce:	f000 f869 	bl	80048a4 <__malloc_lock>
 80047d2:	f8d8 3000 	ldr.w	r3, [r8]
 80047d6:	461c      	mov	r4, r3
 80047d8:	bb44      	cbnz	r4, 800482c <_malloc_r+0x88>
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f7ff ffbf 	bl	8004760 <sbrk_aligned>
 80047e2:	1c43      	adds	r3, r0, #1
 80047e4:	4604      	mov	r4, r0
 80047e6:	d158      	bne.n	800489a <_malloc_r+0xf6>
 80047e8:	f8d8 4000 	ldr.w	r4, [r8]
 80047ec:	4627      	mov	r7, r4
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d143      	bne.n	800487a <_malloc_r+0xd6>
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	d04b      	beq.n	800488e <_malloc_r+0xea>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	4639      	mov	r1, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	eb04 0903 	add.w	r9, r4, r3
 8004800:	f000 fb60 	bl	8004ec4 <_sbrk_r>
 8004804:	4581      	cmp	r9, r0
 8004806:	d142      	bne.n	800488e <_malloc_r+0xea>
 8004808:	6821      	ldr	r1, [r4, #0]
 800480a:	4630      	mov	r0, r6
 800480c:	1a6d      	subs	r5, r5, r1
 800480e:	4629      	mov	r1, r5
 8004810:	f7ff ffa6 	bl	8004760 <sbrk_aligned>
 8004814:	3001      	adds	r0, #1
 8004816:	d03a      	beq.n	800488e <_malloc_r+0xea>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	442b      	add	r3, r5
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	f8d8 3000 	ldr.w	r3, [r8]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	bb62      	cbnz	r2, 8004880 <_malloc_r+0xdc>
 8004826:	f8c8 7000 	str.w	r7, [r8]
 800482a:	e00f      	b.n	800484c <_malloc_r+0xa8>
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	1b52      	subs	r2, r2, r5
 8004830:	d420      	bmi.n	8004874 <_malloc_r+0xd0>
 8004832:	2a0b      	cmp	r2, #11
 8004834:	d917      	bls.n	8004866 <_malloc_r+0xc2>
 8004836:	1961      	adds	r1, r4, r5
 8004838:	42a3      	cmp	r3, r4
 800483a:	6025      	str	r5, [r4, #0]
 800483c:	bf18      	it	ne
 800483e:	6059      	strne	r1, [r3, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	bf08      	it	eq
 8004844:	f8c8 1000 	streq.w	r1, [r8]
 8004848:	5162      	str	r2, [r4, r5]
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	4630      	mov	r0, r6
 800484e:	f000 f82f 	bl	80048b0 <__malloc_unlock>
 8004852:	f104 000b 	add.w	r0, r4, #11
 8004856:	1d23      	adds	r3, r4, #4
 8004858:	f020 0007 	bic.w	r0, r0, #7
 800485c:	1ac2      	subs	r2, r0, r3
 800485e:	bf1c      	itt	ne
 8004860:	1a1b      	subne	r3, r3, r0
 8004862:	50a3      	strne	r3, [r4, r2]
 8004864:	e7af      	b.n	80047c6 <_malloc_r+0x22>
 8004866:	6862      	ldr	r2, [r4, #4]
 8004868:	42a3      	cmp	r3, r4
 800486a:	bf0c      	ite	eq
 800486c:	f8c8 2000 	streq.w	r2, [r8]
 8004870:	605a      	strne	r2, [r3, #4]
 8004872:	e7eb      	b.n	800484c <_malloc_r+0xa8>
 8004874:	4623      	mov	r3, r4
 8004876:	6864      	ldr	r4, [r4, #4]
 8004878:	e7ae      	b.n	80047d8 <_malloc_r+0x34>
 800487a:	463c      	mov	r4, r7
 800487c:	687f      	ldr	r7, [r7, #4]
 800487e:	e7b6      	b.n	80047ee <_malloc_r+0x4a>
 8004880:	461a      	mov	r2, r3
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	42a3      	cmp	r3, r4
 8004886:	d1fb      	bne.n	8004880 <_malloc_r+0xdc>
 8004888:	2300      	movs	r3, #0
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	e7de      	b.n	800484c <_malloc_r+0xa8>
 800488e:	230c      	movs	r3, #12
 8004890:	4630      	mov	r0, r6
 8004892:	6033      	str	r3, [r6, #0]
 8004894:	f000 f80c 	bl	80048b0 <__malloc_unlock>
 8004898:	e794      	b.n	80047c4 <_malloc_r+0x20>
 800489a:	6005      	str	r5, [r0, #0]
 800489c:	e7d6      	b.n	800484c <_malloc_r+0xa8>
 800489e:	bf00      	nop
 80048a0:	200002e0 	.word	0x200002e0

080048a4 <__malloc_lock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	@ (80048ac <__malloc_lock+0x8>)
 80048a6:	f7ff bf11 	b.w	80046cc <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	200002d8 	.word	0x200002d8

080048b0 <__malloc_unlock>:
 80048b0:	4801      	ldr	r0, [pc, #4]	@ (80048b8 <__malloc_unlock+0x8>)
 80048b2:	f7ff bf0c 	b.w	80046ce <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	200002d8 	.word	0x200002d8

080048bc <__ssputs_r>:
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	461f      	mov	r7, r3
 80048c2:	688e      	ldr	r6, [r1, #8]
 80048c4:	4682      	mov	sl, r0
 80048c6:	42be      	cmp	r6, r7
 80048c8:	460c      	mov	r4, r1
 80048ca:	4690      	mov	r8, r2
 80048cc:	680b      	ldr	r3, [r1, #0]
 80048ce:	d82d      	bhi.n	800492c <__ssputs_r+0x70>
 80048d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048d8:	d026      	beq.n	8004928 <__ssputs_r+0x6c>
 80048da:	6965      	ldr	r5, [r4, #20]
 80048dc:	6909      	ldr	r1, [r1, #16]
 80048de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e2:	eba3 0901 	sub.w	r9, r3, r1
 80048e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ea:	1c7b      	adds	r3, r7, #1
 80048ec:	444b      	add	r3, r9
 80048ee:	106d      	asrs	r5, r5, #1
 80048f0:	429d      	cmp	r5, r3
 80048f2:	bf38      	it	cc
 80048f4:	461d      	movcc	r5, r3
 80048f6:	0553      	lsls	r3, r2, #21
 80048f8:	d527      	bpl.n	800494a <__ssputs_r+0x8e>
 80048fa:	4629      	mov	r1, r5
 80048fc:	f7ff ff52 	bl	80047a4 <_malloc_r>
 8004900:	4606      	mov	r6, r0
 8004902:	b360      	cbz	r0, 800495e <__ssputs_r+0xa2>
 8004904:	464a      	mov	r2, r9
 8004906:	6921      	ldr	r1, [r4, #16]
 8004908:	f000 fafa 	bl	8004f00 <memcpy>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	6126      	str	r6, [r4, #16]
 800491a:	444e      	add	r6, r9
 800491c:	6026      	str	r6, [r4, #0]
 800491e:	463e      	mov	r6, r7
 8004920:	6165      	str	r5, [r4, #20]
 8004922:	eba5 0509 	sub.w	r5, r5, r9
 8004926:	60a5      	str	r5, [r4, #8]
 8004928:	42be      	cmp	r6, r7
 800492a:	d900      	bls.n	800492e <__ssputs_r+0x72>
 800492c:	463e      	mov	r6, r7
 800492e:	4632      	mov	r2, r6
 8004930:	4641      	mov	r1, r8
 8004932:	6820      	ldr	r0, [r4, #0]
 8004934:	f000 faac 	bl	8004e90 <memmove>
 8004938:	2000      	movs	r0, #0
 800493a:	68a3      	ldr	r3, [r4, #8]
 800493c:	1b9b      	subs	r3, r3, r6
 800493e:	60a3      	str	r3, [r4, #8]
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4433      	add	r3, r6
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494a:	462a      	mov	r2, r5
 800494c:	f000 fae6 	bl	8004f1c <_realloc_r>
 8004950:	4606      	mov	r6, r0
 8004952:	2800      	cmp	r0, #0
 8004954:	d1e0      	bne.n	8004918 <__ssputs_r+0x5c>
 8004956:	4650      	mov	r0, sl
 8004958:	6921      	ldr	r1, [r4, #16]
 800495a:	f7ff feb9 	bl	80046d0 <_free_r>
 800495e:	230c      	movs	r3, #12
 8004960:	f8ca 3000 	str.w	r3, [sl]
 8004964:	89a3      	ldrh	r3, [r4, #12]
 8004966:	f04f 30ff 	mov.w	r0, #4294967295
 800496a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	e7e9      	b.n	8004946 <__ssputs_r+0x8a>
	...

08004974 <_svfiprintf_r>:
 8004974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004978:	4698      	mov	r8, r3
 800497a:	898b      	ldrh	r3, [r1, #12]
 800497c:	4607      	mov	r7, r0
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	460d      	mov	r5, r1
 8004982:	4614      	mov	r4, r2
 8004984:	b09d      	sub	sp, #116	@ 0x74
 8004986:	d510      	bpl.n	80049aa <_svfiprintf_r+0x36>
 8004988:	690b      	ldr	r3, [r1, #16]
 800498a:	b973      	cbnz	r3, 80049aa <_svfiprintf_r+0x36>
 800498c:	2140      	movs	r1, #64	@ 0x40
 800498e:	f7ff ff09 	bl	80047a4 <_malloc_r>
 8004992:	6028      	str	r0, [r5, #0]
 8004994:	6128      	str	r0, [r5, #16]
 8004996:	b930      	cbnz	r0, 80049a6 <_svfiprintf_r+0x32>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	b01d      	add	sp, #116	@ 0x74
 80049a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a6:	2340      	movs	r3, #64	@ 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049b4:	2330      	movs	r3, #48	@ 0x30
 80049b6:	f04f 0901 	mov.w	r9, #1
 80049ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80049be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004b58 <_svfiprintf_r+0x1e4>
 80049c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x60>
 80049d0:	2a25      	cmp	r2, #37	@ 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x54>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7e>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6b 	bl	80048bc <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80a7 	beq.w	8004b3a <_svfiprintf_r+0x1c6>
 80049ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 809f 	beq.w	8004b3a <_svfiprintf_r+0x1c6>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	484e      	ldr	r0, [pc, #312]	@ (8004b58 <_svfiprintf_r+0x1e4>)
 8004a1e:	f000 fa61 	bl	8004ee4 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xea>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	@ 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xfa>
 8004a42:	4654      	mov	r4, sl
 8004a44:	2000      	movs	r0, #0
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	@ 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94b      	bls.n	8004af0 <_svfiprintf_r+0x17c>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x114>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x114>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	46a2      	mov	sl, r4
 8004a6a:	9304      	str	r3, [sp, #16]
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0xa0>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a8c:	d10a      	bne.n	8004aa4 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a92:	d132      	bne.n	8004afa <_svfiprintf_r+0x186>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	3402      	adds	r4, #2
 8004a98:	1d1a      	adds	r2, r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	9203      	str	r2, [sp, #12]
 8004a9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004b5c <_svfiprintf_r+0x1e8>
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	4650      	mov	r0, sl
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	f000 fa19 	bl	8004ee4 <memchr>
 8004ab2:	b138      	cbz	r0, 8004ac4 <_svfiprintf_r+0x150>
 8004ab4:	2240      	movs	r2, #64	@ 0x40
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	eba0 000a 	sub.w	r0, r0, sl
 8004abc:	4082      	lsls	r2, r0
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	3401      	adds	r4, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac8:	2206      	movs	r2, #6
 8004aca:	4825      	ldr	r0, [pc, #148]	@ (8004b60 <_svfiprintf_r+0x1ec>)
 8004acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ad0:	f000 fa08 	bl	8004ee4 <memchr>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d036      	beq.n	8004b46 <_svfiprintf_r+0x1d2>
 8004ad8:	4b22      	ldr	r3, [pc, #136]	@ (8004b64 <_svfiprintf_r+0x1f0>)
 8004ada:	bb1b      	cbnz	r3, 8004b24 <_svfiprintf_r+0x1b0>
 8004adc:	9b03      	ldr	r3, [sp, #12]
 8004ade:	3307      	adds	r3, #7
 8004ae0:	f023 0307 	bic.w	r3, r3, #7
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	9303      	str	r3, [sp, #12]
 8004ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aea:	4433      	add	r3, r6
 8004aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aee:	e76a      	b.n	80049c6 <_svfiprintf_r+0x52>
 8004af0:	460c      	mov	r4, r1
 8004af2:	2001      	movs	r0, #1
 8004af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004af8:	e7a8      	b.n	8004a4c <_svfiprintf_r+0xd8>
 8004afa:	2300      	movs	r3, #0
 8004afc:	f04f 0c0a 	mov.w	ip, #10
 8004b00:	4619      	mov	r1, r3
 8004b02:	3401      	adds	r4, #1
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	4620      	mov	r0, r4
 8004b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b0c:	3a30      	subs	r2, #48	@ 0x30
 8004b0e:	2a09      	cmp	r2, #9
 8004b10:	d903      	bls.n	8004b1a <_svfiprintf_r+0x1a6>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c6      	beq.n	8004aa4 <_svfiprintf_r+0x130>
 8004b16:	9105      	str	r1, [sp, #20]
 8004b18:	e7c4      	b.n	8004aa4 <_svfiprintf_r+0x130>
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b22:	e7f0      	b.n	8004b06 <_svfiprintf_r+0x192>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <_svfiprintf_r+0x1f4>)
 8004b2e:	a904      	add	r1, sp, #16
 8004b30:	f3af 8000 	nop.w
 8004b34:	1c42      	adds	r2, r0, #1
 8004b36:	4606      	mov	r6, r0
 8004b38:	d1d6      	bne.n	8004ae8 <_svfiprintf_r+0x174>
 8004b3a:	89ab      	ldrh	r3, [r5, #12]
 8004b3c:	065b      	lsls	r3, r3, #25
 8004b3e:	f53f af2d 	bmi.w	800499c <_svfiprintf_r+0x28>
 8004b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b44:	e72c      	b.n	80049a0 <_svfiprintf_r+0x2c>
 8004b46:	ab03      	add	r3, sp, #12
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <_svfiprintf_r+0x1f4>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	f000 f87d 	bl	8004c50 <_printf_i>
 8004b56:	e7ed      	b.n	8004b34 <_svfiprintf_r+0x1c0>
 8004b58:	0800501e 	.word	0x0800501e
 8004b5c:	08005024 	.word	0x08005024
 8004b60:	08005028 	.word	0x08005028
 8004b64:	00000000 	.word	0x00000000
 8004b68:	080048bd 	.word	0x080048bd

08004b6c <_printf_common>:
 8004b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	4616      	mov	r6, r2
 8004b72:	4698      	mov	r8, r3
 8004b74:	688a      	ldr	r2, [r1, #8]
 8004b76:	690b      	ldr	r3, [r1, #16]
 8004b78:	4607      	mov	r7, r0
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	bfb8      	it	lt
 8004b7e:	4613      	movlt	r3, r2
 8004b80:	6033      	str	r3, [r6, #0]
 8004b82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b86:	460c      	mov	r4, r1
 8004b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b8c:	b10a      	cbz	r2, 8004b92 <_printf_common+0x26>
 8004b8e:	3301      	adds	r3, #1
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	0699      	lsls	r1, r3, #26
 8004b96:	bf42      	ittt	mi
 8004b98:	6833      	ldrmi	r3, [r6, #0]
 8004b9a:	3302      	addmi	r3, #2
 8004b9c:	6033      	strmi	r3, [r6, #0]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	f015 0506 	ands.w	r5, r5, #6
 8004ba4:	d106      	bne.n	8004bb4 <_printf_common+0x48>
 8004ba6:	f104 0a19 	add.w	sl, r4, #25
 8004baa:	68e3      	ldr	r3, [r4, #12]
 8004bac:	6832      	ldr	r2, [r6, #0]
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	42ab      	cmp	r3, r5
 8004bb2:	dc2b      	bgt.n	8004c0c <_printf_common+0xa0>
 8004bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bb8:	6822      	ldr	r2, [r4, #0]
 8004bba:	3b00      	subs	r3, #0
 8004bbc:	bf18      	it	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	0692      	lsls	r2, r2, #26
 8004bc2:	d430      	bmi.n	8004c26 <_printf_common+0xba>
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bcc:	47c8      	blx	r9
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d023      	beq.n	8004c1a <_printf_common+0xae>
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	6922      	ldr	r2, [r4, #16]
 8004bd6:	f003 0306 	and.w	r3, r3, #6
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf14      	ite	ne
 8004bde:	2500      	movne	r5, #0
 8004be0:	6833      	ldreq	r3, [r6, #0]
 8004be2:	f04f 0600 	mov.w	r6, #0
 8004be6:	bf08      	it	eq
 8004be8:	68e5      	ldreq	r5, [r4, #12]
 8004bea:	f104 041a 	add.w	r4, r4, #26
 8004bee:	bf08      	it	eq
 8004bf0:	1aed      	subeq	r5, r5, r3
 8004bf2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004bf6:	bf08      	it	eq
 8004bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bfc4      	itt	gt
 8004c00:	1a9b      	subgt	r3, r3, r2
 8004c02:	18ed      	addgt	r5, r5, r3
 8004c04:	42b5      	cmp	r5, r6
 8004c06:	d11a      	bne.n	8004c3e <_printf_common+0xd2>
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e008      	b.n	8004c1e <_printf_common+0xb2>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4652      	mov	r2, sl
 8004c10:	4641      	mov	r1, r8
 8004c12:	4638      	mov	r0, r7
 8004c14:	47c8      	blx	r9
 8004c16:	3001      	adds	r0, #1
 8004c18:	d103      	bne.n	8004c22 <_printf_common+0xb6>
 8004c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c22:	3501      	adds	r5, #1
 8004c24:	e7c1      	b.n	8004baa <_printf_common+0x3e>
 8004c26:	2030      	movs	r0, #48	@ 0x30
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c34:	4422      	add	r2, r4
 8004c36:	3302      	adds	r3, #2
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c3c:	e7c2      	b.n	8004bc4 <_printf_common+0x58>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4622      	mov	r2, r4
 8004c42:	4641      	mov	r1, r8
 8004c44:	4638      	mov	r0, r7
 8004c46:	47c8      	blx	r9
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d0e6      	beq.n	8004c1a <_printf_common+0xae>
 8004c4c:	3601      	adds	r6, #1
 8004c4e:	e7d9      	b.n	8004c04 <_printf_common+0x98>

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	7e0f      	ldrb	r7, [r1, #24]
 8004c56:	4691      	mov	r9, r2
 8004c58:	2f78      	cmp	r7, #120	@ 0x78
 8004c5a:	4680      	mov	r8, r0
 8004c5c:	460c      	mov	r4, r1
 8004c5e:	469a      	mov	sl, r3
 8004c60:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	@ 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d3 	beq.w	8004e18 <_printf_i+0x1c8>
 8004c72:	2f58      	cmp	r7, #88	@ 0x58
 8004c74:	f000 80ba 	beq.w	8004dec <_printf_i+0x19c>
 8004c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c90 <_printf_i+0x40>)
 8004c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004dff 	.word	0x08004dff
 8004cc0:	08004d27 	.word	0x08004d27
 8004cc4:	08004db9 	.word	0x08004db9
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e21 	.word	0x08004e21
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d27 	.word	0x08004d27
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004dc1 	.word	0x08004dc1
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6032      	str	r2, [r6, #0]
 8004cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e09e      	b.n	8004e3a <_printf_i+0x1ea>
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1d19      	adds	r1, r3, #4
 8004d02:	6031      	str	r1, [r6, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0xbc>
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <_printf_i+0xc4>
 8004d0c:	0645      	lsls	r5, r0, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0xb8>
 8004d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	da03      	bge.n	8004d20 <_printf_i+0xd0>
 8004d18:	232d      	movs	r3, #45	@ 0x2d
 8004d1a:	426d      	negs	r5, r5
 8004d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d20:	230a      	movs	r3, #10
 8004d22:	4859      	ldr	r0, [pc, #356]	@ (8004e88 <_printf_i+0x238>)
 8004d24:	e011      	b.n	8004d4a <_printf_i+0xfa>
 8004d26:	6821      	ldr	r1, [r4, #0]
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	0608      	lsls	r0, r1, #24
 8004d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d30:	d402      	bmi.n	8004d38 <_printf_i+0xe8>
 8004d32:	0649      	lsls	r1, r1, #25
 8004d34:	bf48      	it	mi
 8004d36:	b2ad      	uxthmi	r5, r5
 8004d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	bf14      	ite	ne
 8004d3e:	230a      	movne	r3, #10
 8004d40:	2308      	moveq	r3, #8
 8004d42:	4851      	ldr	r0, [pc, #324]	@ (8004e88 <_printf_i+0x238>)
 8004d44:	2100      	movs	r1, #0
 8004d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d4a:	6866      	ldr	r6, [r4, #4]
 8004d4c:	2e00      	cmp	r6, #0
 8004d4e:	bfa8      	it	ge
 8004d50:	6821      	ldrge	r1, [r4, #0]
 8004d52:	60a6      	str	r6, [r4, #8]
 8004d54:	bfa4      	itt	ge
 8004d56:	f021 0104 	bicge.w	r1, r1, #4
 8004d5a:	6021      	strge	r1, [r4, #0]
 8004d5c:	b90d      	cbnz	r5, 8004d62 <_printf_i+0x112>
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	d04b      	beq.n	8004dfa <_printf_i+0x1aa>
 8004d62:	4616      	mov	r6, r2
 8004d64:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d68:	fb03 5711 	mls	r7, r3, r1, r5
 8004d6c:	5dc7      	ldrb	r7, [r0, r7]
 8004d6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d72:	462f      	mov	r7, r5
 8004d74:	42bb      	cmp	r3, r7
 8004d76:	460d      	mov	r5, r1
 8004d78:	d9f4      	bls.n	8004d64 <_printf_i+0x114>
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d10b      	bne.n	8004d96 <_printf_i+0x146>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	07df      	lsls	r7, r3, #31
 8004d82:	d508      	bpl.n	8004d96 <_printf_i+0x146>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	6861      	ldr	r1, [r4, #4]
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	bfde      	ittt	le
 8004d8c:	2330      	movle	r3, #48	@ 0x30
 8004d8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d96:	1b92      	subs	r2, r2, r6
 8004d98:	6122      	str	r2, [r4, #16]
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f8cd a000 	str.w	sl, [sp]
 8004da4:	aa03      	add	r2, sp, #12
 8004da6:	f7ff fee1 	bl	8004b6c <_printf_common>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d14a      	bne.n	8004e44 <_printf_i+0x1f4>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	b004      	add	sp, #16
 8004db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	f043 0320 	orr.w	r3, r3, #32
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	2778      	movs	r7, #120	@ 0x78
 8004dc2:	4832      	ldr	r0, [pc, #200]	@ (8004e8c <_printf_i+0x23c>)
 8004dc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	6831      	ldr	r1, [r6, #0]
 8004dcc:	061f      	lsls	r7, r3, #24
 8004dce:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dd2:	d402      	bmi.n	8004dda <_printf_i+0x18a>
 8004dd4:	065f      	lsls	r7, r3, #25
 8004dd6:	bf48      	it	mi
 8004dd8:	b2ad      	uxthmi	r5, r5
 8004dda:	6031      	str	r1, [r6, #0]
 8004ddc:	07d9      	lsls	r1, r3, #31
 8004dde:	bf44      	itt	mi
 8004de0:	f043 0320 	orrmi.w	r3, r3, #32
 8004de4:	6023      	strmi	r3, [r4, #0]
 8004de6:	b11d      	cbz	r5, 8004df0 <_printf_i+0x1a0>
 8004de8:	2310      	movs	r3, #16
 8004dea:	e7ab      	b.n	8004d44 <_printf_i+0xf4>
 8004dec:	4826      	ldr	r0, [pc, #152]	@ (8004e88 <_printf_i+0x238>)
 8004dee:	e7e9      	b.n	8004dc4 <_printf_i+0x174>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	f023 0320 	bic.w	r3, r3, #32
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	e7f6      	b.n	8004de8 <_printf_i+0x198>
 8004dfa:	4616      	mov	r6, r2
 8004dfc:	e7bd      	b.n	8004d7a <_printf_i+0x12a>
 8004dfe:	6833      	ldr	r3, [r6, #0]
 8004e00:	6825      	ldr	r5, [r4, #0]
 8004e02:	1d18      	adds	r0, r3, #4
 8004e04:	6961      	ldr	r1, [r4, #20]
 8004e06:	6030      	str	r0, [r6, #0]
 8004e08:	062e      	lsls	r6, r5, #24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	d501      	bpl.n	8004e12 <_printf_i+0x1c2>
 8004e0e:	6019      	str	r1, [r3, #0]
 8004e10:	e002      	b.n	8004e18 <_printf_i+0x1c8>
 8004e12:	0668      	lsls	r0, r5, #25
 8004e14:	d5fb      	bpl.n	8004e0e <_printf_i+0x1be>
 8004e16:	8019      	strh	r1, [r3, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4616      	mov	r6, r2
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	e7bc      	b.n	8004d9a <_printf_i+0x14a>
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	2100      	movs	r1, #0
 8004e24:	1d1a      	adds	r2, r3, #4
 8004e26:	6032      	str	r2, [r6, #0]
 8004e28:	681e      	ldr	r6, [r3, #0]
 8004e2a:	6862      	ldr	r2, [r4, #4]
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 f859 	bl	8004ee4 <memchr>
 8004e32:	b108      	cbz	r0, 8004e38 <_printf_i+0x1e8>
 8004e34:	1b80      	subs	r0, r0, r6
 8004e36:	6060      	str	r0, [r4, #4]
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e42:	e7aa      	b.n	8004d9a <_printf_i+0x14a>
 8004e44:	4632      	mov	r2, r6
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	47d0      	blx	sl
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d0ad      	beq.n	8004dae <_printf_i+0x15e>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	079b      	lsls	r3, r3, #30
 8004e56:	d413      	bmi.n	8004e80 <_printf_i+0x230>
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	bfb8      	it	lt
 8004e60:	4618      	movlt	r0, r3
 8004e62:	e7a6      	b.n	8004db2 <_printf_i+0x162>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4632      	mov	r2, r6
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	47d0      	blx	sl
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d09d      	beq.n	8004dae <_printf_i+0x15e>
 8004e72:	3501      	adds	r5, #1
 8004e74:	68e3      	ldr	r3, [r4, #12]
 8004e76:	9903      	ldr	r1, [sp, #12]
 8004e78:	1a5b      	subs	r3, r3, r1
 8004e7a:	42ab      	cmp	r3, r5
 8004e7c:	dcf2      	bgt.n	8004e64 <_printf_i+0x214>
 8004e7e:	e7eb      	b.n	8004e58 <_printf_i+0x208>
 8004e80:	2500      	movs	r5, #0
 8004e82:	f104 0619 	add.w	r6, r4, #25
 8004e86:	e7f5      	b.n	8004e74 <_printf_i+0x224>
 8004e88:	0800502f 	.word	0x0800502f
 8004e8c:	08005040 	.word	0x08005040

08004e90 <memmove>:
 8004e90:	4288      	cmp	r0, r1
 8004e92:	b510      	push	{r4, lr}
 8004e94:	eb01 0402 	add.w	r4, r1, r2
 8004e98:	d902      	bls.n	8004ea0 <memmove+0x10>
 8004e9a:	4284      	cmp	r4, r0
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	d807      	bhi.n	8004eb0 <memmove+0x20>
 8004ea0:	1e43      	subs	r3, r0, #1
 8004ea2:	42a1      	cmp	r1, r4
 8004ea4:	d008      	beq.n	8004eb8 <memmove+0x28>
 8004ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eae:	e7f8      	b.n	8004ea2 <memmove+0x12>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4402      	add	r2, r0
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	d100      	bne.n	8004eba <memmove+0x2a>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ec2:	e7f7      	b.n	8004eb4 <memmove+0x24>

08004ec4 <_sbrk_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	4d05      	ldr	r5, [pc, #20]	@ (8004ee0 <_sbrk_r+0x1c>)
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f7fb ff16 	bl	8000d00 <_sbrk>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_sbrk_r+0x1a>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_sbrk_r+0x1a>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	200002d4 	.word	0x200002d4

08004ee4 <memchr>:
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	b2c9      	uxtb	r1, r1
 8004eea:	4402      	add	r2, r0
 8004eec:	4293      	cmp	r3, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	d101      	bne.n	8004ef6 <memchr+0x12>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e003      	b.n	8004efe <memchr+0x1a>
 8004ef6:	7804      	ldrb	r4, [r0, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	428c      	cmp	r4, r1
 8004efc:	d1f6      	bne.n	8004eec <memchr+0x8>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <memcpy>:
 8004f00:	440a      	add	r2, r1
 8004f02:	4291      	cmp	r1, r2
 8004f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f08:	d100      	bne.n	8004f0c <memcpy+0xc>
 8004f0a:	4770      	bx	lr
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f12:	4291      	cmp	r1, r2
 8004f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f18:	d1f9      	bne.n	8004f0e <memcpy+0xe>
 8004f1a:	bd10      	pop	{r4, pc}

08004f1c <_realloc_r>:
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	4680      	mov	r8, r0
 8004f22:	4615      	mov	r5, r2
 8004f24:	460c      	mov	r4, r1
 8004f26:	b921      	cbnz	r1, 8004f32 <_realloc_r+0x16>
 8004f28:	4611      	mov	r1, r2
 8004f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	f7ff bc39 	b.w	80047a4 <_malloc_r>
 8004f32:	b92a      	cbnz	r2, 8004f40 <_realloc_r+0x24>
 8004f34:	f7ff fbcc 	bl	80046d0 <_free_r>
 8004f38:	2400      	movs	r4, #0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	f000 f81a 	bl	8004f78 <_malloc_usable_size_r>
 8004f44:	4285      	cmp	r5, r0
 8004f46:	4606      	mov	r6, r0
 8004f48:	d802      	bhi.n	8004f50 <_realloc_r+0x34>
 8004f4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f4e:	d8f4      	bhi.n	8004f3a <_realloc_r+0x1e>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fc26 	bl	80047a4 <_malloc_r>
 8004f58:	4607      	mov	r7, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0ec      	beq.n	8004f38 <_realloc_r+0x1c>
 8004f5e:	42b5      	cmp	r5, r6
 8004f60:	462a      	mov	r2, r5
 8004f62:	4621      	mov	r1, r4
 8004f64:	bf28      	it	cs
 8004f66:	4632      	movcs	r2, r6
 8004f68:	f7ff ffca 	bl	8004f00 <memcpy>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f7ff fbae 	bl	80046d0 <_free_r>
 8004f74:	463c      	mov	r4, r7
 8004f76:	e7e0      	b.n	8004f3a <_realloc_r+0x1e>

08004f78 <_malloc_usable_size_r>:
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f18      	subs	r0, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbc      	itt	lt
 8004f82:	580b      	ldrlt	r3, [r1, r0]
 8004f84:	18c0      	addlt	r0, r0, r3
 8004f86:	4770      	bx	lr

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
